{"ast":null,"code":"/*!\n * Chart.js v4.4.1\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */\n'use strict';\n\nvar helpers_segment = require('./chunks/helpers.segment.cjs');\nrequire('@kurkle/color');\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n    this._request = helpers_segment.requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n  _update(date = Date.now()) {\n    let remaining = 0;\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n      for (; i >= 0; --i) {\n        item = items[i];\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n      remaining += items.length;\n    });\n    this._lastDate = date;\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\nvar animator = /* #__PURE__ */new Animator();\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color(from, to, factor) {\n    const c0 = helpers_segment.color(from || transparent);\n    const c1 = c0.valid && helpers_segment.color(to || transparent);\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = helpers_segment.resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = helpers_segment.resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = helpers_segment.effects[cfg.easing] || helpers_segment.effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n  active() {\n    return this._active;\n  }\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = helpers_segment.resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = helpers_segment.resolve([cfg.from, currentValue, to]);\n    }\n  }\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || elapsed < duration);\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n    factor = elapsed / duration % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({\n        res,\n        rej\n      });\n    });\n  }\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n  configure(config) {\n    if (!helpers_segment.isObject(config)) {\n      return;\n    }\n    const animationOptions = Object.keys(helpers_segment.defaults.animation);\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!helpers_segment.isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n      (helpers_segment.isArray(cfg.properties) && cfg.properties || [key]).forEach(prop => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {});\n    }\n    return animations;\n  }\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n    const animations = this._createAnimations(target, values);\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n  return options;\n}\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\nfunction toClip(value) {\n  let t, r, b, l;\n  if (helpers_segment.isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n  if (value === null) {\n    return;\n  }\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (helpers_segment.isNumberFinite(otherValue) && (singleMode || value === 0 || helpers_segment.sign(value) === helpers_segment.sign(otherValue))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if (positive && value > 0 || !positive && value < 0) {\n      return meta.index;\n    }\n  }\n  return null;\n}\nfunction updateStacks(controller, parsed) {\n  const {\n    chart,\n    _cachedMeta: meta\n  } = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {\n    iScale,\n    vScale,\n    index: datasetIndex\n  } = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {\n      [iAxis]: index,\n      [vAxis]: value\n    } = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n  return helpers_segment.createContext(parent, {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\nfunction createDataContext(parent, index, element) {\n  return helpers_segment.createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\nconst isDirectUpdateMode = mode => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {\n  keys: getSortedDatasetIndices(chart, true),\n  values: null\n};\nclass DatasetController {\n  static defaults = {};\n  static datasetElementType = null;\n  static dataElementType = null;\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n    this.initialize();\n  }\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n    const xid = meta.xAxisID = helpers_segment.valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = helpers_segment.valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = helpers_segment.valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale ? meta.vScale : meta.iScale;\n  }\n  reset() {\n    this._update('reset');\n  }\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      helpers_segment.unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n    if (helpers_segment.isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        helpers_segment.unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        helpers_segment.listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n  addElements() {\n    const meta = this._cachedMeta;\n    this._dataCheck();\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n    this._dataCheck();\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n    this._resyncElements(resetNewElements);\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n  parse(start, count) {\n    const {\n      _cachedMeta: meta,\n      _data: data\n    } = this;\n    const {\n      iScale,\n      _stacked\n    } = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (helpers_segment.isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (helpers_segment.isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(helpers_segment.resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(helpers_segment.resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {\n      mode\n    });\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    const {\n      min: otherMin,\n      max: otherMax\n    } = getUserBounds(otherScale);\n    let i, parsed;\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !helpers_segment.isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        break;\n      }\n    }\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (helpers_segment.isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n  getMaxOverflow() {\n    return false;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(helpers_segment.valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n  update(mode) {}\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || elements.length - start;\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n  }\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && helpers_segment.defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(helpers_segment.defaults.elements[elementType]);\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n    return values;\n  }\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {\n      sharedOptions,\n      includeOptions\n    };\n  }\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: !active && this.getSharedOptions(options) || options\n    });\n  }\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n    if (count) {\n      this.parse(0, count);\n    }\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n    const move = arr => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n  updateElements(element, start, count, mode) {}\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = helpers_segment._arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n    if (helpers_segment.defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n  return min;\n}\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n  if (helpers_segment.isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\nfunction parseValue(entry, item, vScale, i) {\n  if (helpers_segment.isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return helpers_segment.sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n  if (edge === true) {\n    properties.borderSkipped = {\n      top: true,\n      right: true,\n      bottom: true,\n      left: true\n    };\n    return;\n  }\n  const {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  } = borderProps(properties);\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, {\n  inflateAmount\n}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n  static id = 'bar';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true\n      }\n    }\n  };\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(helpers_segment.resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(helpers_segment.resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n  getMaxOverflow() {\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      index,\n      _cachedMeta: {\n        vScale\n      }\n    } = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || helpers_segment.isNullOrUndef(parsed[vScale.axis]) ? {\n        base,\n        head: base\n      } : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n  _getStacks(last, dataIndex) {\n    const {\n      iScale\n    } = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type).filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const skipNull = meta => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n      if (helpers_segment.isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n    return stacks;\n  }\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = name !== undefined ? stacks.indexOf(name) : -1;\n    return index === -1 ? stacks.length - 1 : index;\n  }\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n  _calculateBarValuePixels(index) {\n    const {\n      _cachedMeta: {\n        vScale,\n        _stacked,\n        index: datasetIndex\n      },\n      options: {\n        base: baseValue,\n        minBarLength\n      }\n    } = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      if (value !== 0 && helpers_segment.sign(value) !== helpers_segment.sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n    const startValue = !helpers_segment.isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n    size = head - base;\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n      if (_stacked && !floating) {\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = helpers_segment.sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = helpers_segment.valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n}\nclass BubbleController extends DatasetController {\n  static id = 'bubble';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = helpers_segment.valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = helpers_segment.valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n    if (values.$shared) {\n      values = Object.assign({}, values, {\n        $shared: false\n      });\n    }\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += helpers_segment.valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n}\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  if (circumference < helpers_segment.TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => helpers_segment._angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => helpers_segment._angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(helpers_segment.HALF_PI, startY, endY);\n    const minX = calcMin(helpers_segment.PI, startX, endX);\n    const minY = calcMin(helpers_segment.PI + helpers_segment.HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {\n    ratioX,\n    ratioY,\n    offsetX,\n    offsetY\n  };\n}\nclass DoughnutController extends DatasetController {\n  static id = 'doughnut';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      }\n    },\n    cutout: '50%',\n    rotation: 0,\n    circumference: 360,\n    radius: '100%',\n    spacing: 0,\n    indexAxis: 'r'\n  };\n  static descriptors = {\n    _scriptable: name => name !== 'spacing',\n    _indexable: name => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n  linkScales() {}\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = i => +data[i];\n      if (helpers_segment.isObject(data[start])) {\n        const {\n          key = 'value'\n        } = this._parsing;\n        getter = i => +helpers_segment.resolveObjectKey(data[i], key);\n      }\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n  _getRotation() {\n    return helpers_segment.toRadians(this.options.rotation - 90);\n  }\n  _getCircumference() {\n    return helpers_segment.toRadians(this.options.circumference);\n  }\n  _getRotationExtents() {\n    let min = helpers_segment.TAU;\n    let max = -helpers_segment.TAU;\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n    return {\n      rotation: min,\n      circumference: max - min\n    };\n  }\n  update(mode) {\n    const chart = this.chart;\n    const {\n      chartArea\n    } = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(helpers_segment.toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n    const {\n      circumference,\n      rotation\n    } = this._getRotationExtents();\n    const {\n      ratioX,\n      ratioY,\n      offsetX,\n      offsetY\n    } = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = helpers_segment.toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / helpers_segment.TAU);\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n    return total;\n  }\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return helpers_segment.TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = helpers_segment.formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n    if (!arcs) {\n      return 0;\n    }\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n  getMaxOffset(arcs) {\n    let max = 0;\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n    return ringWeightOffset;\n  }\n  _getRingWeight(datasetIndex) {\n    return Math.max(helpers_segment.valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\nclass LineController extends DatasetController {\n  static id = 'line';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    showLine: true,\n    spanGaps: false\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category'\n      },\n      _value_: {\n        type: 'linear'\n      }\n    }\n  };\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      dataset: line,\n      data: points = [],\n      _dataset\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = helpers_segment._getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (helpers_segment._scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = helpers_segment.isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n      const parsed = this.getParsed(i);\n      const nullData = helpers_segment.isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\nclass PolarAreaController extends DatasetController {\n  static id = 'polarArea';\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      }\n    },\n    indexAxis: 'r',\n    startAngle: 0\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = helpers_segment.formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return helpers_segment._parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n    return range;\n  }\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - radiusLength * this.index;\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * helpers_segment.PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index) ? helpers_segment.toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n  }\n}\nclass PieController extends DoughnutController {\n  static id = 'pie';\n  static defaults = {\n    cutout: 0,\n    rotation: 0,\n    circumference: 360,\n    radius: '100%'\n  };\n}\nclass RadarController extends DatasetController {\n  static id = 'radar';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    }\n  };\n  static overrides = {\n    aspectRatio: 1,\n    scales: {\n      r: {\n        type: 'radialLinear'\n      }\n    }\n  };\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return helpers_segment._parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\nclass ScatterController extends DatasetController {\n  static id = 'scatter';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n  static overrides = {\n    interaction: {\n      mode: 'point'\n    },\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      data: points = []\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = helpers_segment._getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (helpers_segment._scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    if (this.options.showLine) {\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n      const {\n        dataset: line,\n        _dataset\n      } = meta;\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n    this.updateElements(points, start, count, mode);\n  }\n  addElements() {\n    const {\n      showLine\n    } = this.options;\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n    super.addElements();\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = helpers_segment.isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = helpers_segment.isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PieController: PieController,\n  PolarAreaController: PolarAreaController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase {\n  /**\n  * Override default date adapter methods.\n  * Accepts type parameter to define options type.\n  * @example\n  * Chart._adapters._date.override<{myAdapterOption: string}>({\n  *   init() {\n  *     console.log(this.options.myAdapterOption);\n  *   }\n  * })\n  */\n  static override(members) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n  options;\n  constructor(options) {\n    this.options = options || {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n  formats() {\n    return abstract();\n  }\n  parse() {\n    return abstract();\n  }\n  format() {\n    return abstract();\n  }\n  add() {\n    return abstract();\n  }\n  diff() {\n    return abstract();\n  }\n  startOf() {\n    return abstract();\n  }\n  endOf() {\n    return abstract();\n  }\n}\nvar adapters = {\n  _date: DateAdapterBase\n};\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {\n    controller,\n    data,\n    _sorted\n  } = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? helpers_segment._rlookupByKey : helpers_segment._lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {\n      index,\n      data\n    } = metasets[i];\n    const {\n      lo,\n      hi\n    } = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n  const evaluationFunc = function (element, datasetIndex, index) {\n    if (!includeInvisible && !helpers_segment._isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  };\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n  function evaluationFunc(element, datasetIndex, index) {\n    const {\n      startAngle,\n      endAngle\n    } = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {\n      angle\n    } = helpers_segment.getAngleFromPoint(element, {\n      x: position.x,\n      y: position.y\n    });\n    if (helpers_segment._angleBetween(angle, startAngle, endAngle)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{\n        element,\n        datasetIndex,\n        index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n  return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\nvar Interaction = {\n  evaluateInteractionItems,\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = helpers_segment.getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n      if (!items.length) {\n        return [];\n      }\n      chart.getSortedVisibleDatasetMetas().forEach(meta => {\n        const index = items[0].index;\n        const element = meta.data[index];\n        if (element && !element.skip) {\n          elements.push({\n            element,\n            datasetIndex: meta.index,\n            index\n          });\n        }\n      });\n      return elements;\n    },\n    dataset(chart, e, options, useFinalPosition) {\n      const position = helpers_segment.getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex,\n            index: i\n          });\n        }\n      }\n      return items;\n    },\n    point(chart, e, options, useFinalPosition) {\n      const position = helpers_segment.getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n    nearest(chart, e, options, useFinalPosition) {\n      const position = helpers_segment.getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n    x(chart, e, options, useFinalPosition) {\n      const position = helpers_segment.getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n    y(chart, e, options, useFinalPosition) {\n      const position = helpers_segment.getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({\n      position: pos,\n      options: {\n        stack,\n        stackWeight = 1\n      }\n    } = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && pos + stack,\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {\n      stack,\n      pos,\n      stackWeight\n    } = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {\n      count: 0,\n      placed: 0,\n      weight: 0,\n      size: 0\n    });\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {\n    vBoxMaxWidth,\n    hBoxMaxHeight\n  } = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {\n      fullSize\n    } = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {\n    pos,\n    box\n  } = layout;\n  const maxPadding = chartArea.maxPadding;\n  if (!helpers_segment.isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {\n      size: 0,\n      count: 1\n    };\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function marginForPositions(positions) {\n    const margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(pos => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n    const {\n      same,\n      other\n    } = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {\n    x,\n    y\n  } = chartArea;\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {\n      count: 1,\n      placed: 0,\n      weight: 1\n    };\n    const weight = layout.stackWeight / stack.weight || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (helpers_segment.defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (helpers_segment.defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n  chartArea.x = x;\n  chartArea.y = y;\n}\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n    chart.boxes.push(item);\n  },\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n    const padding = helpers_segment.toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    helpers_segment.each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, helpers_segment.toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    helpers_segment.each(boxes.chartArea, layout => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      });\n    });\n  }\n};\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n  releaseContext(context) {\n    return false;\n  }\n  addEventListener(chart, type, listener) {}\n  removeEventListener(chart, type, listener) {}\n  getDevicePixelRatio() {\n    return 1;\n  }\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n  isAttached(canvas) {\n    return true;\n  }\n  updateConfig(config) {}\n}\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\nconst isNullOrEmpty = value => value === null || value === '';\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = helpers_segment.readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = helpers_segment.readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n  return canvas;\n}\nconst eventListenerOptions = helpers_segment.supportsEventListenerOptions ? {\n  passive: true\n} : false;\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {\n    x,\n    y\n  } = helpers_segment.getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && helpers_segment._getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = helpers_segment.throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = helpers_segment.throttled(event => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n  addListener(canvas, type, proxy);\n  return proxy;\n}\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n    return null;\n  }\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach(prop => {\n      const value = initial[prop];\n      if (helpers_segment.isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach(key => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n    if (!proxy) {\n      return;\n    }\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return helpers_segment.getMaximumSize(canvas, width, height, aspectRatio);\n  }\n  isAttached(canvas) {\n    const container = helpers_segment._getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\nfunction _detectPlatform(canvas) {\n  if (!helpers_segment._isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\nclass Element {\n  static defaults = {};\n  static defaultRoutes = undefined;\n  x;\n  y;\n  active = false;\n  options;\n  $animations;\n  tooltipPosition(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  hasValue() {\n    return helpers_segment.isNumber(this.x) && helpers_segment.isNumber(this.y);\n  }\n  getProps(props, final) {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this;\n    }\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n}\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, helpers_segment.isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, helpers_segment.isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n  const factors = helpers_segment._factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = helpers_segment.valueOrDefault(majorStart, 0);\n  const end = Math.min(helpers_segment.valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n  next = start;\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n  if (len < 2) {\n    return false;\n  }\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\nconst reverseAlign = align => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\nfunction garbageCollect(caches, length) {\n  helpers_segment.each(caches, cache => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n  const font = helpers_segment.toFont(options.font, fallback);\n  const padding = helpers_segment.toPadding(options.padding);\n  const lines = helpers_segment.isArray(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n  return helpers_segment.createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\nfunction createTickContext(parent, index, tick) {\n  return helpers_segment.createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\nfunction titleAlign(align, position, reverse) {\n  let ret = helpers_segment._toLeftRightCenter(align);\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n  const {\n    top,\n    left,\n    bottom,\n    right,\n    chart\n  } = scale;\n  const {\n    chartArea,\n    scales\n  } = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n  if (scale.isHorizontal()) {\n    titleX = helpers_segment._alignStartEnd(align, left, right);\n    if (helpers_segment.isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (helpers_segment.isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = helpers_segment._alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -helpers_segment.HALF_PI : helpers_segment.HALF_PI;\n  }\n  return {\n    titleX,\n    titleY,\n    maxWidth,\n    rotation\n  };\n}\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n  parse(raw, index) {\n    return raw;\n  }\n  getUserBounds() {\n    let {\n      _userMin,\n      _userMax,\n      _suggestedMin,\n      _suggestedMax\n    } = this;\n    _userMin = helpers_segment.finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = helpers_segment.finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = helpers_segment.finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = helpers_segment.finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: helpers_segment.finiteOrDefault(_userMin, _suggestedMin),\n      max: helpers_segment.finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: helpers_segment.isNumberFinite(_userMin),\n      maxDefined: helpers_segment.isNumberFinite(_userMax)\n    };\n  }\n  getMinMax(canStack) {\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let range;\n    if (minDefined && maxDefined) {\n      return {\n        min,\n        max\n      };\n    }\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: helpers_segment.finiteOrDefault(min, helpers_segment.finiteOrDefault(max, min)),\n      max: helpers_segment.finiteOrDefault(max, helpers_segment.finiteOrDefault(min, max))\n    };\n  }\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n  getTicks() {\n    return this.ticks;\n  }\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n  beforeUpdate() {\n    helpers_segment.callback(this.options.beforeUpdate, [this]);\n  }\n  update(maxWidth, maxHeight, margins) {\n    const {\n      beginAtZero,\n      grace,\n      ticks: tickOpts\n    } = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = helpers_segment._addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n  afterUpdate() {\n    helpers_segment.callback(this.options.afterUpdate, [this]);\n  }\n  beforeSetDimensions() {\n    helpers_segment.callback(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    helpers_segment.callback(this.options.afterSetDimensions, [this]);\n  }\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    helpers_segment.callback(this.options[name], [this]);\n  }\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n  beforeTickToLabelConversion() {\n    helpers_segment.callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = helpers_segment.callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    helpers_segment.callback(this.options.afterTickToLabelConversion, [this]);\n  }\n  beforeCalculateLabelRotation() {\n    helpers_segment.callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n    const maxWidth = helpers_segment._limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = helpers_segment.toDegrees(Math.min(Math.asin(helpers_segment._limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(helpers_segment._limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(helpers_segment._limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    helpers_segment.callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n  beforeFit() {\n    helpers_segment.callback(this.options.beforeFit, [this]);\n  }\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {\n      chart,\n      options: {\n        ticks: tickOpts,\n        title: titleOpts,\n        grid: gridOpts\n      }\n    } = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n      if (tickOpts.display && this.ticks.length) {\n        const {\n          first,\n          last,\n          widest,\n          highest\n        } = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = helpers_segment.toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n    this._handleMargins();\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n  _calculatePadding(first, last, sin, cos) {\n    const {\n      ticks: {\n        align,\n        padding\n      },\n      position\n    } = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n  afterFit() {\n    helpers_segment.callback(this.options.afterFit, [this]);\n  }\n  isHorizontal() {\n    const {\n      axis,\n      position\n    } = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  isFullSize() {\n    return this.options.fullSize;\n  }\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (helpers_segment.isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n    this.afterTickToLabelConversion();\n  }\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n    return labelSizes;\n  }\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {\n      ctx,\n      _longestTextCache: caches\n    } = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {\n        data: {},\n        gc: []\n      };\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      if (!helpers_segment.isNullOrUndef(label) && !helpers_segment.isArray(label)) {\n        width = helpers_segment._measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (helpers_segment.isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          if (!helpers_segment.isNullOrUndef(nestedLabel) && !helpers_segment.isArray(nestedLabel)) {\n            width = helpers_segment._measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n    const valueAt = idx => ({\n      width: widths[idx] || 0,\n      height: heights[idx] || 0\n    });\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights\n    };\n  }\n  getLabelForValue(value) {\n    return value;\n  }\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n  getValueForPixel(pixel) {}\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n    const pixel = this._startPixel + decimal * this._length;\n    return helpers_segment._int16Range(this._alignToPixels ? helpers_segment._alignPixel(this.chart, pixel, 0) : pixel);\n  }\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n  getBaseValue() {\n    const {\n      min,\n      max\n    } = this;\n    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n  }\n  getContext(index) {\n    const ticks = this.ticks || [];\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = helpers_segment.toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n  }\n  _isVisible() {\n    const display = this.options.display;\n    if (display !== 'auto') {\n      return !!display;\n    }\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {\n      grid,\n      position,\n      border\n    } = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function (pixel) {\n      return helpers_segment._alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (helpers_segment.isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (helpers_segment.isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n    const limit = helpers_segment.valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n      if (lineValue === undefined) {\n        continue;\n      }\n      alignedLineValue = helpers_segment._alignPixel(chart, lineValue, lineWidth);\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset\n      });\n    }\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {\n      position,\n      ticks: optionTicks\n    } = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {\n      align,\n      crossAlign,\n      padding,\n      mirror\n    } = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -helpers_segment.toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n      } else if (helpers_segment.isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n      } else if (helpers_segment.isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = helpers_segment.isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n      if (isHorizontal) {\n        x = pixel;\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += lineHeight / 2 * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n      let backdrop;\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = helpers_segment.toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n        switch (textBaseline) {\n          case 'middle':\n            top -= height / 2;\n            break;\n          case 'bottom':\n            top -= height;\n            break;\n        }\n        switch (textAlign) {\n          case 'center':\n            left -= width / 2;\n            break;\n          case 'right':\n            left -= width;\n            break;\n          case 'inner':\n            if (i === ilen - 1) {\n              left -= width;\n            } else if (i > 0) {\n              left -= width / 2;\n            }\n            break;\n        }\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor\n        };\n      }\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop\n        }\n      });\n    }\n    return items;\n  }\n  _getXAxisLabelAlignment() {\n    const {\n      position,\n      ticks\n    } = this.options;\n    const rotation = -helpers_segment.toRadians(this.labelRotation);\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n    let align = 'center';\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n    return align;\n  }\n  _getYAxisLabelAlignment(tl) {\n    const {\n      position,\n      ticks: {\n        crossAlign,\n        mirror,\n        padding\n      }\n    } = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n    return {\n      textAlign,\n      x\n    };\n  }\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n    const chart = this.chart;\n    const position = this.options.position;\n    if (position === 'left' || position === 'right') {\n      return {\n        top: 0,\n        left: this.left,\n        bottom: chart.height,\n        right: this.right\n      };\n    }\n    if (position === 'top' || position === 'bottom') {\n      return {\n        top: this.top,\n        left: 0,\n        bottom: this.bottom,\n        right: chart.width\n      };\n    }\n  }\n  drawBackground() {\n    const {\n      ctx,\n      options: {\n        backgroundColor\n      },\n      left,\n      top,\n      width,\n      height\n    } = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n        if (grid.drawOnChartArea) {\n          drawLine({\n            x: item.x1,\n            y: item.y1\n          }, {\n            x: item.x2,\n            y: item.y2\n          }, item);\n        }\n        if (grid.drawTicks) {\n          drawLine({\n            x: item.tx1,\n            y: item.ty1\n          }, {\n            x: item.tx2,\n            y: item.ty2\n          }, {\n            color: item.tickColor,\n            width: item.tickWidth,\n            borderDash: item.tickBorderDash,\n            borderDashOffset: item.tickBorderDashOffset\n          });\n        }\n      }\n    }\n  }\n  drawBorder() {\n    const {\n      chart,\n      ctx,\n      options: {\n        border,\n        grid\n      }\n    } = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n    if (this.isHorizontal()) {\n      x1 = helpers_segment._alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = helpers_segment._alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = helpers_segment._alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = helpers_segment._alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n    if (!optionTicks.display) {\n      return;\n    }\n    const ctx = this.ctx;\n    const area = this._computeLabelArea();\n    if (area) {\n      helpers_segment.clipArea(ctx, area);\n    }\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      helpers_segment.renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n    if (area) {\n      helpers_segment.unclipArea(ctx);\n    }\n  }\n  drawTitle() {\n    const {\n      ctx,\n      options: {\n        position,\n        title,\n        reverse\n      }\n    } = this;\n    if (!title.display) {\n      return;\n    }\n    const font = helpers_segment.toFont(title.font);\n    const padding = helpers_segment.toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n    if (position === 'bottom' || position === 'center' || helpers_segment.isObject(position)) {\n      offset += padding.bottom;\n      if (helpers_segment.isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = titleArgs(this, offset, position, align);\n    helpers_segment.renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = helpers_segment.valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = helpers_segment.valueOrDefault(opts.border && opts.border.z, 0);\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: chartArea => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n    return [{\n      z: gz,\n      draw: chartArea => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: chartArea => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return helpers_segment.toFont(opts.font);\n  }\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n    if (id in items) {\n      return scope;\n    }\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      helpers_segment.defaults.override(item.id, item.overrides);\n    }\n    return scope;\n  }\n  get(id) {\n    return this.items[id];\n  }\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n    if (id in items) {\n      delete items[id];\n    }\n    if (scope && id in helpers_segment.defaults[scope]) {\n      delete helpers_segment.defaults[scope][id];\n      if (this.override) {\n        delete helpers_segment.overrides[id];\n      }\n    }\n  }\n}\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = helpers_segment.merge(Object.create(null), [parentScope ? helpers_segment.defaults.get(parentScope) : {}, helpers_segment.defaults.get(scope), item.defaults]);\n  helpers_segment.defaults.set(scope, itemDefaults);\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n  if (item.descriptors) {\n    helpers_segment.defaults.describe(scope, item.descriptors);\n  }\n}\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    helpers_segment.defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  add(...args) {\n    this._each('register', args);\n  }\n  remove(...args) {\n    this._each('unregister', args);\n  }\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n        this._exec(method, reg, arg);\n      } else {\n        helpers_segment.each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n  _exec(method, registry, component) {\n    const camelMethod = helpers_segment._capitalize(method);\n    helpers_segment.callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    helpers_segment.callback(component['after' + camelMethod], [], component);\n  }\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    return this.plugins;\n  }\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n}\nvar registry = /* #__PURE__ */new Registry();\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (helpers_segment.callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n    return true;\n  }\n  invalidate() {\n    if (!helpers_segment.isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n    const descriptors = this._cache = this._createDescriptors(chart);\n    this._notifyStateChanges(chart);\n    return descriptors;\n  }\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = helpers_segment.valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n  return {\n    plugins,\n    localIds\n  };\n}\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\nfunction createDescriptors(chart, {\n  plugins,\n  localIds\n}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {\n        plugin,\n        local: localIds[id]\n      }, opts, context)\n    });\n  }\n  return result;\n}\nfunction pluginOpts(config, {\n  plugin,\n  local\n}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = helpers_segment.defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\nfunction determineAxis(id, ...scaleOptions) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {\n      axis\n    };\n  }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter(d => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = helpers_segment.overrides[config.type] || {\n    scales: {}\n  };\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!helpers_segment.isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), helpers_segment.defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = helpers_segment.mergeIf(Object.create(null), [{\n      axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = helpers_segment.overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      helpers_segment.mergeIf(scales[id], [{\n        axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    helpers_segment.mergeIf(scale, [helpers_segment.defaults.scales[scale.type], helpers_segment.defaults.scale]);\n  });\n  return scales;\n}\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = helpers_segment.valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\nconst addIfFound = (set, obj, key) => {\n  const opts = helpers_segment.resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n  get platform() {\n    return this._config.platform;\n  }\n  get type() {\n    return this._config.type;\n  }\n  set type(type) {\n    this._config.type = type;\n  }\n  get data() {\n    return this._config.data;\n  }\n  set data(data) {\n    this._config.data = initData(data);\n  }\n  get options() {\n    return this._config.options;\n  }\n  set options(options) {\n    this._config.options = options;\n  }\n  get plugins() {\n    return this._config.plugins;\n  }\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType, () => [[`datasets.${datasetType}`, '']]);\n  }\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`, () => [[`datasets.${datasetType}.transitions.${transition}`, `transitions.${transition}`], [`datasets.${datasetType}`, '']]);\n  }\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`, () => [[`datasets.${datasetType}.elements.${elementType}`, `datasets.${datasetType}`, `elements.${elementType}`, '']]);\n  }\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`, () => [[`plugins.${id}`, ...(plugin.additionalOptionScopes || [])]]);\n  }\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {\n      options,\n      type\n    } = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, helpers_segment.overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, helpers_segment.defaults, key));\n      keys.forEach(key => addIfFound(scopes, helpers_segment.descriptors, key));\n    });\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n  chartOptionScopes() {\n    const {\n      options,\n      type\n    } = this;\n    return [options, helpers_segment.overrides[type] || {}, helpers_segment.defaults.datasets[type] || {}, {\n      type\n    }, helpers_segment.defaults, helpers_segment.descriptors];\n  }\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {\n      $shared: true\n    };\n    const {\n      resolver,\n      subPrefixes\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = helpers_segment.isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = helpers_segment._attachContext(resolver, context, subResolver);\n    }\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {\n      resolver\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    return helpers_segment.isObject(context) ? helpers_segment._attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n  }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = helpers_segment._createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\nconst hasFunction = value => helpers_segment.isObject(value) && Object.getOwnPropertyNames(value).some(key => helpers_segment.isFunction(value[key]));\nfunction needContext(proxy, names) {\n  const {\n    isScriptable,\n    isIndexable\n  } = helpers_segment._descriptors(proxy);\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if (scriptable && (helpers_segment.isFunction(value) || hasFunction(value)) || indexable && helpers_segment.isArray(value)) {\n      return true;\n    }\n  }\n  return false;\n}\nvar version = \"4.4.1\";\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  helpers_segment.callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  helpers_segment.callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\nfunction getCanvas(item) {\n  if (helpers_segment._isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n  return item;\n}\nconst instances = {};\nconst getChart = key => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter(c => c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\nfunction getSizeForArea(scale, chartArea, field) {\n  return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n  const {\n    xScale,\n    yScale\n  } = meta;\n  if (xScale && yScale) {\n    return {\n      left: getSizeForArea(xScale, chartArea, 'left'),\n      right: getSizeForArea(xScale, chartArea, 'right'),\n      top: getSizeForArea(yScale, chartArea, 'top'),\n      bottom: getSizeForArea(yScale, chartArea, 'bottom')\n    };\n  }\n  return chartArea;\n}\nclass Chart {\n  static defaults = helpers_segment.defaults;\n  static instances = instances;\n  static overrides = helpers_segment.overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n    }\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = helpers_segment.uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = helpers_segment.debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n  get aspectRatio() {\n    const {\n      options: {\n        aspectRatio,\n        maintainAspectRatio\n      },\n      width,\n      height,\n      _aspectRatio\n    } = this;\n    if (!helpers_segment.isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n    return height ? width / height : null;\n  }\n  get data() {\n    return this.config.data;\n  }\n  set data(data) {\n    this.config.data = data;\n  }\n  get options() {\n    return this._options;\n  }\n  set options(options) {\n    this.config.options = options;\n  }\n  get registry() {\n    return registry;\n  }\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      helpers_segment.retinaScale(this, this.options.devicePixelRatio);\n    }\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n  clear() {\n    helpers_segment.clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {\n        width,\n        height\n      };\n    }\n  }\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!helpers_segment.retinaScale(this, newRatio, true)) {\n      return;\n    }\n    this.notifyPlugins('resize', {\n      size: newSize\n    });\n    helpers_segment.callback(options.onResize, [this, newSize], this);\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    helpers_segment.each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n    if (scaleOpts) {\n      items = items.concat(Object.keys(scaleOpts).map(id => {\n        const scaleOptions = scaleOpts[id];\n        const axis = determineAxis(id, scaleOptions);\n        const isRadial = axis === 'r';\n        const isHorizontal = axis === 'x';\n        return {\n          options: scaleOptions,\n          dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n          dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n        };\n      }));\n    }\n    helpers_segment.each(items, item => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = helpers_segment.valueOrDefault(scaleOptions.type, item.dtype);\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n      scale.init(scaleOptions, options);\n    });\n    helpers_segment.each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    helpers_segment.each(scales, scale => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n  _removeUnreferencedMetasets() {\n    const {\n      _metasets: metasets,\n      data: {\n        datasets\n      }\n    } = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n    this._removeUnreferencedMetasets();\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {\n          datasetElementType,\n          dataElementType\n        } = helpers_segment.defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n    this._updateMetasets();\n    return newControllers;\n  }\n  _resetElements() {\n    helpers_segment.each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n    this._plugins.invalidate();\n    if (this.notifyPlugins('beforeUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {\n        controller\n      } = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n    if (!animsDisabled) {\n      helpers_segment.each(newControllers, controller => {\n        controller.reset();\n      });\n    }\n    this._updateDatasets(mode);\n    this.notifyPlugins('afterUpdate', {\n      mode\n    });\n    this._layers.sort(compare2Level('z', '_idx'));\n    const {\n      _active,\n      _lastEvent\n    } = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n    this.render();\n  }\n  _updateScales() {\n    helpers_segment.each(this.scales, scale => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n    if (!helpers_segment.setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n  _updateHiddenIndices() {\n    const {\n      _hiddenIndices\n    } = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {\n      method,\n      start,\n      count\n    } of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = idx => new Set(_dataChanges.filter(c => c[0] === idx).map((c, i) => i + ',' + c.splice(1).join(',')));\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!helpers_segment.setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet).map(c => c.split(',')).map(a => ({\n      method: a[1],\n      start: +a[2],\n      count: +a[3]\n    }));\n  }\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    helpers_segment.each(this.boxes, box => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n    this.notifyPlugins('afterLayout');\n  }\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, helpers_segment.isFunction(mode) ? mode({\n        datasetIndex: i\n      }) : mode);\n    }\n    this.notifyPlugins('afterDatasetsUpdate', {\n      mode\n    });\n  }\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {\n      meta,\n      index,\n      mode,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n    meta.controller._update(mode);\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n  render() {\n    if (this.notifyPlugins('beforeRender', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({\n        chart: this\n      });\n    }\n  }\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {\n        width,\n        height\n      } = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n    if (this.notifyPlugins('beforeDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this._drawDatasets();\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this.notifyPlugins('afterDraw');\n  }\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta, this.chartArea);\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n    if (useClip) {\n      helpers_segment.clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n    meta.controller.draw();\n    if (useClip) {\n      helpers_segment.unclipArea(ctx);\n    }\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n  isPointInArea(point) {\n    return helpers_segment._isPointInArea(point, this.chartArea, this._minPadding);\n  }\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n    return [];\n  }\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n    return meta;\n  }\n  getContext() {\n    return this.$context || (this.$context = helpers_segment.createContext(null, {\n      chart: this,\n      type: 'chart'\n    }));\n  }\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n    if (helpers_segment.defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {\n        visible\n      });\n      this.update(ctx => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {\n      canvas,\n      ctx\n    } = this;\n    this._stop();\n    this.config.clearCache();\n    if (canvas) {\n      this.unbindEvents();\n      helpers_segment.clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n    helpers_segment.each(this.options.events, type => _add(type, listener));\n  }\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n    let detached;\n    const attached = () => {\n      _remove('attach', attached);\n      this.attached = true;\n      this.resize();\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n    detached = () => {\n      this.attached = false;\n      _remove('resize', listener);\n      this._stop();\n      this._resize(0, 0);\n      _add('attach', attached);\n    };\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n  unbindEvents() {\n    helpers_segment.each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    helpers_segment.each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({\n      datasetIndex,\n      index\n    }) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !helpers_segment._elementsEqual(active, lastActive);\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = plugin => (plugin.options.events || this.options.events).includes(e.native.type);\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n    if (changed || args.changed) {\n      this.render();\n    }\n    return this;\n  }\n  _handleEvent(e, replay, inChartArea) {\n    const {\n      _active: lastActive = [],\n      options\n    } = this;\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = helpers_segment._isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n    if (inChartArea) {\n      this._lastEvent = null;\n      helpers_segment.callback(options.onHover, [e, active, this], this);\n      if (isClick) {\n        helpers_segment.callback(options.onClick, [e, active, this], this);\n      }\n    }\n    const changed = !helpers_segment._elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\nfunction invalidatePlugins() {\n  return helpers_segment.each(Chart.instances, chart => chart._plugins.invalidate());\n}\nfunction clipArc(ctx, element, endAngle) {\n  const {\n    startAngle,\n    pixelMargin,\n    x,\n    y,\n    outerRadius,\n    innerRadius\n  } = element;\n  let angleMargin = pixelMargin / outerRadius;\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + helpers_segment.HALF_PI, startAngle - helpers_segment.HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\nfunction toRadiusCorners(value) {\n  return helpers_segment._readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = val => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return helpers_segment._limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: helpers_segment._limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: helpers_segment._limitValue(o.innerEnd, 0, innerLimit)\n  };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  const {\n    x,\n    y,\n    startAngle: start,\n    pixelMargin,\n    innerRadius: innerR\n  } = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n  const beta = Math.max(0.001, alpha * outerRadius - offset / helpers_segment.PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {\n    outerStart,\n    outerEnd,\n    innerStart,\n    innerEnd\n  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + helpers_segment.HALF_PI);\n    }\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + helpers_segment.HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - helpers_segment.HALF_PI);\n    }\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - helpers_segment.HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n  ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference\n  } = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % helpers_segment.TAU || helpers_segment.TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference,\n    options\n  } = element;\n  const {\n    borderWidth,\n    borderJoinStyle,\n    borderDash,\n    borderDashOffset\n  } = options;\n  const inner = options.borderAlign === 'inner';\n  if (!borderWidth) {\n    return;\n  }\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % helpers_segment.TAU || helpers_segment.TAU);\n    }\n  }\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\nclass ArcElement extends Element {\n  static id = 'arc';\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n  static descriptors = {\n    _scriptable: true,\n    _indexable: name => name !== 'borderDash'\n  };\n  circumference;\n  endAngle;\n  fullCircles;\n  innerRadius;\n  outerRadius;\n  pixelMargin;\n  startAngle;\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {\n      angle,\n      distance\n    } = helpers_segment.getAngleFromPoint(point, {\n      x: chartX,\n      y: chartY\n    });\n    const {\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius,\n      circumference\n    } = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = helpers_segment.valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= helpers_segment.TAU || helpers_segment._angleBetween(angle, startAngle, endAngle);\n    const withinRadius = helpers_segment._isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n    return betweenAngles && withinRadius;\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius\n    } = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius'], useFinalPosition);\n    const {\n      offset,\n      spacing\n    } = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n  draw(ctx) {\n    const {\n      options,\n      circumference\n    } = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n    this.fullCircles = circumference > helpers_segment.TAU ? Math.floor(circumference / helpers_segment.TAU) : 0;\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n    ctx.save();\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(helpers_segment.PI, circumference || 0));\n    const radiusOffset = offset * fix;\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n    ctx.restore();\n  }\n}\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = helpers_segment.valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(helpers_segment.valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = helpers_segment.valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = helpers_segment.valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = helpers_segment.valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = helpers_segment.valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return helpers_segment._steppedLineTo;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return helpers_segment._bezierCurveTo;\n  }\n  return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {\n    start: paramsStart = 0,\n    end: paramsEnd = count - 1\n  } = params;\n  const {\n    start: segmentStart,\n    end: segmentEnd\n  } = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\nfunction pathSegment(ctx, line, segment, params) {\n  const {\n    points,\n    options\n  } = line;\n  const {\n    count,\n    start,\n    loop,\n    ilen\n  } = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {\n    move = true,\n    reverse\n  } = params || {};\n  let i, point, prev;\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    prev = point;\n  }\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n  return !!loop;\n}\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {\n    count,\n    start,\n    ilen\n  } = pathVars(points, segment, params);\n  const {\n    move = true,\n    reverse\n  } = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n  const pointIndex = index => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n    if (point.skip) {\n      continue;\n    }\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    lastY = y;\n  }\n  drawX();\n}\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return helpers_segment._steppedInterpolation;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return helpers_segment._bezierInterpolation;\n  }\n  return helpers_segment._pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n  const {\n    segments,\n    options\n  } = line;\n  const segmentMethod = _getSegmentMethod(line);\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {\n      start,\n      end: start + count - 1\n    })) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\nclass LineElement extends Element {\n  static id = 'line';\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  static descriptors = {\n    _scriptable: true,\n    _indexable: name => name !== 'borderDash' && name !== 'fill'\n  };\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      helpers_segment._updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n  get points() {\n    return this._points;\n  }\n  get segments() {\n    return this._segments || (this._segments = helpers_segment._computeSegments(this, this.options.segment));\n  }\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = helpers_segment._boundSegments(this, {\n      property,\n      start: value,\n      end: value\n    });\n    if (!segments.length) {\n      return;\n    }\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {\n        start,\n        end\n      } = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n    start = start || 0;\n    count = count || this.points.length - start;\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {\n        start,\n        end: start + count - 1\n      });\n    }\n    return !!loop;\n  }\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {\n    [axis]: value\n  } = el.getProps([axis], useFinalPosition);\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n  static id = 'point';\n  parsed;\n  skip;\n  stop;\n  /**\n  * @type {any}\n  */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n  /**\n  * @type {any}\n  */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n  draw(ctx, area) {\n    const options = this.options;\n    if (this.skip || options.radius < 0.1 || !helpers_segment._isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    helpers_segment.drawPoint(ctx, options, this.x, this.y);\n  }\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\nfunction getBarBounds(bar, useFinalPosition) {\n  const {\n    x,\n    y,\n    base,\n    width,\n    height\n  } = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n  return {\n    left,\n    top,\n    right,\n    bottom\n  };\n}\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : helpers_segment._limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = helpers_segment.toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {\n    enableBorderRadius\n  } = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = helpers_segment.toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || helpers_segment.isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || helpers_segment._isBetween(x, bounds.left, bounds.right)) && (skipY || helpers_segment._isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\nclass BarElement extends Element {\n  static id = 'bar';\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  draw(ctx) {\n    const {\n      inflateAmount,\n      options: {\n        borderColor,\n        backgroundColor\n      }\n    } = this;\n    const {\n      inner,\n      outer\n    } = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? helpers_segment.addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      base,\n      horizontal\n    } = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  BarElement: BarElement,\n  LineElement: LineElement,\n  PointElement: PointElement\n});\nconst BORDER_COLORS = ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n  return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n  return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n  return i;\n}\nfunction getColorizer(chart) {\n  let i = 0;\n  return (dataset, datasetIndex) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\nfunction containsColorsDefinitions(descriptors) {\n  let k;\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction containsColorsDefinition(descriptor) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nvar plugin_colors = {\n  id: 'colors',\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  },\n  beforeLayout(chart, _args, options) {\n    if (!options.enabled) {\n      return;\n    }\n    const {\n      data: {\n        datasets\n      },\n      options: chartOptions\n    } = chart.config;\n    const {\n      elements\n    } = chartOptions;\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n      return;\n    }\n    const colorizer = getColorizer(chart);\n    datasets.forEach(colorizer);\n  }\n};\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {\n      x: pointAx,\n      y: pointAy\n    } = data[a];\n    maxArea = area = -1;\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n      if (!helpers_segment.isNullOrUndef(minIndex) && !helpers_segment.isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n  return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data\n    });\n  }\n}\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(dataset => {\n    cleanDecimatedDataset(dataset);\n  });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {\n    iScale\n  } = meta;\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = iScale.getUserBounds();\n  if (minDefined) {\n    start = helpers_segment._limitValue(helpers_segment._lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = helpers_segment._limitValue(helpers_segment._lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n  return {\n    start,\n    count\n  };\n}\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {\n        _data,\n        indexAxis\n      } = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n      if (helpers_segment.resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n      if (chart.options.parsing) {\n        return;\n      }\n      let {\n        start,\n        count\n      } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n      if (helpers_segment.isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            return this._decimated;\n          },\n          set: function (d) {\n            this._data = d;\n          }\n        });\n      }\n      let decimated;\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n        default:\n          throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n      dataset._decimated = decimated;\n    });\n  },\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n  for (const segment of segments) {\n    let {\n      start,\n      end\n    } = segment;\n    end = _findSegmentEnd(start, end, points);\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n    const targetSegments = helpers_segment._boundSegments(target, bounds);\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = helpers_segment._boundSegment(segment, points, subBounds);\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n  if (property === 'angle') {\n    start = helpers_segment._normalizeAngle(start);\n    end = helpers_segment._normalizeAngle(end);\n  }\n  return {\n    property,\n    start,\n    end\n  };\n}\nfunction _pointsFromSegments(boundary, line) {\n  const {\n    x = null,\n    y = null\n  } = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({\n    start,\n    end\n  }) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y\n      });\n      points.push({\n        x: last.x,\n        y\n      });\n    } else if (x !== null) {\n      points.push({\n        x,\n        y: first.y\n      });\n      points.push({\n        x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n  for (; end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\nfunction _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n  if (helpers_segment.isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n  return points.length ? new LineElement({\n    points,\n    options: {\n      tension: 0\n    },\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\nfunction _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n  if (!propagate) {\n    return fill;\n  }\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!helpers_segment.isNumberFinite(fill)) {\n      return fill;\n    }\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n    if (target.visible) {\n      return fill;\n    }\n    visited.push(fill);\n    fill = target.fill;\n  }\n  return false;\n}\nfunction _decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n  if (helpers_segment.isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n  let target = parseFloat(fill);\n  if (helpers_segment.isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n  return target;\n}\nfunction _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (helpers_segment.isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\nfunction _getTargetValue(fill, scale, startValue) {\n  let value;\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (helpers_segment.isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = helpers_segment.valueOrDefault(fillOption && fillOption.target, fillOption);\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n  if (fill === false || fill === null) {\n    return false;\n  }\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\nfunction _buildStackLine(source) {\n  const {\n    scale,\n    index,\n    line\n  } = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({\n    points,\n    options: {}\n  });\n}\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {\n      first,\n      last,\n      point\n    } = findPoint(line, sourcePoint, 'x');\n    if (!point || first && last) {\n      continue;\n    }\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (helpers_segment._isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {\n    first,\n    last,\n    point\n  };\n}\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n  pathSegment(ctx, bounds, opts) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    bounds = bounds || {\n      start: 0,\n      end: helpers_segment.TAU\n    };\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n  interpolate(point) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\nfunction _getTarget(source) {\n  const {\n    chart,\n    fill,\n    line\n  } = source;\n  if (helpers_segment.isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n  if (fill === 'shape') {\n    return true;\n  }\n  const boundary = computeBoundary(source);\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n  return _createBoundaryLine(boundary, line);\n}\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n  const {\n    scale = {},\n    fill\n  } = source;\n  const pixel = _getTargetPixel(fill, scale);\n  if (helpers_segment.isNumberFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n  return null;\n}\nfunction computeCircularBoundary(source) {\n  const {\n    scale,\n    fill\n  } = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\nfunction _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {\n    line,\n    scale,\n    axis\n  } = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {\n    above = color,\n    below = color\n  } = fillOption || {};\n  if (target && line.points.length) {\n    helpers_segment.clipArea(ctx, area);\n    doFill(ctx, {\n      line,\n      target,\n      above,\n      below,\n      area,\n      scale,\n      axis\n    });\n    helpers_segment.unclipArea(ctx);\n  }\n}\nfunction doFill(ctx, cfg) {\n  const {\n    line,\n    target,\n    above,\n    below,\n    area,\n    scale\n  } = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {\n      line,\n      target,\n      color: above,\n      scale,\n      property\n    });\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {\n    line,\n    target,\n    color: below,\n    scale,\n    property\n  });\n  ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n  const {\n    segments,\n    points\n  } = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {\n      start,\n      end\n    } = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {\n      move: lineLoop\n    });\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction fill(ctx, cfg) {\n  const {\n    line,\n    target,\n    property,\n    color,\n    scale\n  } = cfg;\n  const segments = _segments(line, target, property);\n  for (const {\n    source: src,\n    target: tgt,\n    start,\n    end\n  } of segments) {\n    const {\n      style: {\n        backgroundColor = color\n      } = {}\n    } = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n      const targetLoop = !!target.pathSegment(ctx, tgt, {\n        move: lineLoop,\n        reverse: true\n      });\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\nfunction clipBounds(ctx, scale, bounds) {\n  const {\n    top,\n    bottom\n  } = scale.chart.chartArea;\n  const {\n    property,\n    start,\n    end\n  } = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\nvar index = {\n  id: 'filler',\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line\n        };\n      }\n      meta.$filler = source;\n      sources.push(source);\n    }\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {\n    boxHeight = fontSize,\n    boxWidth = fontSize\n  } = labelOpts;\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = helpers_segment.callback(labelOpts.generateLabels, [this.chart], this) || [];\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter(item => labelOpts.filter(item, this.chart.data));\n    }\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n    this.legendItems = legendItems;\n  }\n  fit() {\n    const {\n      options,\n      ctx\n    } = this;\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n    const labelOpts = options.labels;\n    const labelFont = helpers_segment.toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {\n      boxWidth,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {\n      ctx,\n      maxWidth,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n      hitboxes[i] = {\n        left: 0,\n        top,\n        row,\n        width: itemWidth,\n        height: itemHeight\n      };\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {\n      ctx,\n      maxHeight,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const {\n        itemWidth,\n        itemHeight\n      } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({\n          width: currentColWidth,\n          height: currentColHeight\n        });\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n      hitboxes[i] = {\n        left,\n        top: currentColHeight,\n        col,\n        width: itemWidth,\n        height: itemHeight\n      };\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({\n      width: currentColWidth,\n      height: currentColHeight\n    });\n    return totalWidth;\n  }\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {\n      legendHitBoxes: hitboxes,\n      options: {\n        align,\n        labels: {\n          padding\n        },\n        rtl\n      }\n    } = this;\n    const rtlHelper = helpers_segment.getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = helpers_segment._alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = helpers_segment._alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = helpers_segment._alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = helpers_segment._alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      helpers_segment.clipArea(ctx, this);\n      this._draw();\n      helpers_segment.unclipArea(ctx);\n    }\n  }\n  _draw() {\n    const {\n      options: opts,\n      columnSizes,\n      lineWidths,\n      ctx\n    } = this;\n    const {\n      align,\n      labels: labelOpts\n    } = opts;\n    const defaultColor = helpers_segment.defaults.color;\n    const rtlHelper = helpers_segment.getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = helpers_segment.toFont(labelOpts.font);\n    const {\n      padding\n    } = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {\n      boxWidth,\n      boxHeight,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    const drawLegendBox = function (x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n      ctx.save();\n      const lineWidth = helpers_segment.valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = helpers_segment.valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = helpers_segment.valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = helpers_segment.valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = helpers_segment.valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = helpers_segment.valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(helpers_segment.valueOrDefault(legendItem.lineDash, []));\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        helpers_segment.drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = helpers_segment.toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          helpers_segment.addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n      ctx.restore();\n    };\n    const fillText = function (x, y, legendItem) {\n      helpers_segment.renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: helpers_segment._alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: helpers_segment._alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n    helpers_segment.overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor;\n      ctx.fillStyle = legendItem.fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = helpers_segment._alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = helpers_segment._alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = helpers_segment._textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    helpers_segment.restoreTextDirection(this.ctx, opts.textDirection);\n  }\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = helpers_segment.toFont(titleOpts.font);\n    const titlePadding = helpers_segment.toPadding(titleOpts.padding);\n    if (!titleOpts.display) {\n      return;\n    }\n    const rtlHelper = helpers_segment.getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = helpers_segment._alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + helpers_segment._alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n    const x = helpers_segment._alignStartEnd(position, left, left + maxWidth);\n    ctx.textAlign = rtlHelper.textAlign(helpers_segment._toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    helpers_segment.renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = helpers_segment.toFont(titleOpts.font);\n    const titlePadding = helpers_segment.toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n    if (helpers_segment._isBetween(x, this.left, this.right) && helpers_segment._isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n        if (helpers_segment._isBetween(x, hitBox.left, hitBox.left + hitBox.width) && helpers_segment._isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n    return null;\n  }\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        helpers_segment.callback(opts.onLeave, [e, previous, this], this);\n      }\n      this._hoveredItem = hoveredItem;\n      if (hoveredItem && !sameItem) {\n        helpers_segment.callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      helpers_segment.callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {\n    itemWidth,\n    itemHeight\n  };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: ctx => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {\n          labels: {\n            usePointStyle,\n            pointStyle,\n            textAlign,\n            color,\n            useBorderRadius,\n            borderRadius\n          }\n        } = chart.legend.options;\n        return chart._getSortedDatasetMetas().map(meta => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = helpers_segment.toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: ctx => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: name => !name.startsWith('on'),\n    labels: {\n      _scriptable: name => !['generateLabels', 'filter', 'sort'].includes(name)\n    }\n  }\n};\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = helpers_segment.isArray(opts.text) ? opts.text.length : 1;\n    this._padding = helpers_segment.toPadding(opts.padding);\n    const textSize = lineCount * helpers_segment.toFont(opts.font).lineHeight + this._padding.height;\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n  _drawArgs(offset) {\n    const {\n      top,\n      left,\n      bottom,\n      right,\n      options\n    } = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    if (this.isHorizontal()) {\n      titleX = helpers_segment._alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = helpers_segment._alignStartEnd(align, bottom, top);\n        rotation = helpers_segment.PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = helpers_segment._alignStartEnd(align, top, bottom);\n        rotation = helpers_segment.PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    };\n  }\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    if (!opts.display) {\n      return;\n    }\n    const fontOpts = helpers_segment.toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = this._drawArgs(offset);\n    helpers_segment.renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: helpers_segment._toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n}\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal'\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = helpers_segment.distanceBetweenPoints(eventPosition, center);\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n    return {\n      x,\n      y\n    };\n  }\n};\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (helpers_segment.isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n  return base;\n}\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\nfunction createTooltipItem(chart, item) {\n  const {\n    element,\n    datasetIndex,\n    index\n  } = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {\n    label,\n    value\n  } = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {\n    body,\n    footer,\n    title\n  } = tooltip;\n  const {\n    boxWidth,\n    boxHeight\n  } = options;\n  const bodyFont = helpers_segment.toFont(options.bodyFont);\n  const titleFont = helpers_segment.toFont(options.titleFont);\n  const footerFont = helpers_segment.toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = helpers_segment.toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n  let widthPadding = 0;\n  const maxLineWidth = function (line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n  ctx.save();\n  ctx.font = titleFont.string;\n  helpers_segment.each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  helpers_segment.each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n  helpers_segment.each(body, bodyItem => {\n    helpers_segment.each(bodyItem.before, maxLineWidth);\n    helpers_segment.each(bodyItem.lines, maxLineWidth);\n    helpers_segment.each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  helpers_segment.each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width,\n    height\n  };\n}\nfunction determineYAlign(chart, size) {\n  const {\n    y,\n    height\n  } = size;\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n  return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {\n    x,\n    width\n  } = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {\n    x,\n    width\n  } = size;\n  const {\n    width: chartWidth,\n    chartArea: {\n      left,\n      right\n    }\n  } = chart;\n  let xAlign = 'center';\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n  return xAlign;\n}\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\nfunction alignX(size, xAlign) {\n  let {\n    x,\n    width\n  } = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n  return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {\n    y,\n    height\n  } = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n  return y;\n}\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {\n    caretSize,\n    caretPadding,\n    cornerRadius\n  } = options;\n  const {\n    xAlign,\n    yAlign\n  } = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {\n    topLeft,\n    topRight,\n    bottomLeft,\n    bottomRight\n  } = helpers_segment.toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n  return {\n    x: helpers_segment._limitValue(x, 0, chart.width - size.width),\n    y: helpers_segment._limitValue(y, 0, chart.height - size.height)\n  };\n}\nfunction getAlignedX(tooltip, align, options) {\n  const padding = helpers_segment.toPadding(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return helpers_segment.createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n  beforeTitle: helpers_segment.noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n    return '';\n  },\n  afterTitle: helpers_segment.noop,\n  beforeBody: helpers_segment.noop,\n  beforeLabel: helpers_segment.noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n    let label = tooltipItem.dataset.label || '';\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!helpers_segment.isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation\n    };\n  },\n  afterLabel: helpers_segment.noop,\n  afterBody: helpers_segment.noop,\n  beforeFooter: helpers_segment.noop,\n  footer: helpers_segment.noop,\n  afterFooter: helpers_segment.noop\n};\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n  return result;\n}\nclass Tooltip extends Element {\n  static positioners = positioners;\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n    if (cached) {\n      return cached;\n    }\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getContext() {\n    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n  getTitle(context, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n  }\n  getBody(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const bodyItems = [];\n    helpers_segment.each(tooltipItems, context => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n  }\n  getFooter(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n    helpers_segment.each(tooltipItems, context => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n    if (changed && options.external) {\n      options.external.call(this, {\n        chart: this.chart,\n        tooltip: this,\n        replay\n      });\n    }\n  }\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n  getCaretPosition(tooltipPoint, size, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      caretSize,\n      cornerRadius\n    } = options;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = helpers_segment.toTRBLCorners(cornerRadius);\n    const {\n      x: ptX,\n      y: ptY\n    } = tooltipPoint;\n    const {\n      width,\n      height\n    } = size;\n    let x1, x2, x3, y1, y2, y3;\n    if (yAlign === 'center') {\n      y2 = ptY + height / 2;\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {\n      x1,\n      x2,\n      x3,\n      y1,\n      y2,\n      y3\n    };\n  }\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n    if (length) {\n      const rtlHelper = helpers_segment.getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = helpers_segment.toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {\n      boxHeight,\n      boxWidth\n    } = options;\n    const bodyFont = helpers_segment.toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      helpers_segment.drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      helpers_segment.drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = helpers_segment.isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = helpers_segment.toTRBLCorners(labelColor.borderRadius);\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        helpers_segment.addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        helpers_segment.addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n  drawBody(pt, ctx, options) {\n    const {\n      body\n    } = this;\n    const {\n      bodySpacing,\n      bodyAlign,\n      displayColors,\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = helpers_segment.toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = helpers_segment.getRtlAdapter(options.rtl, this.x, this.width);\n    const fillLineOfText = function (line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    helpers_segment.each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      helpers_segment.each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n      helpers_segment.each(bodyItem.after, fillLineOfText);\n    }\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    helpers_segment.each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n    if (length) {\n      const rtlHelper = helpers_segment.getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = helpers_segment.toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      x,\n      y\n    } = pt;\n    const {\n      width,\n      height\n    } = tooltipSize;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = helpers_segment.toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n  _willRender() {\n    return !!this.opacity;\n  }\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n    if (!opacity) {\n      return;\n    }\n    this._updateAnimationTarget(options);\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = helpers_segment.toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      helpers_segment.overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      helpers_segment.restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({\n      datasetIndex,\n      index\n    }) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !helpers_segment._elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n    const positionChanged = this._positionChanged(active, e);\n    const changed = replay || !helpers_segment._elementsEqual(active, lastActive) || positionChanged;\n    if (changed) {\n      this._active = active;\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n    return changed;\n  }\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive.filter(i => this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n    }\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n    if (options.reverse) {\n      active.reverse();\n    }\n    return active;\n  }\n  _positionChanged(active, e) {\n    const {\n      caretX,\n      caretY,\n      options\n    } = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        chart,\n        options\n      });\n    }\n  },\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n      if (chart.notifyPlugins('beforeTooltipDraw', {\n        ...args,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: name => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Colors: plugin_colors,\n  Decimation: plugin_decimation,\n  Filler: index,\n  Legend: plugin_legend,\n  SubTitle: plugin_subtitle,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({\n      index,\n      label: raw\n    });\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\nconst validIndex = (index, max) => index === null ? null : helpers_segment._limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\nclass CategoryScale extends Scale {\n  static id = 'category';\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {\n        index,\n        label\n      } of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n  parse(raw, index) {\n    if (helpers_segment.isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, helpers_segment.valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n  determineDataLimits() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this.getMinMax(true);\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n    for (let value = min; value <= max; value++) {\n      ticks.push({\n        value\n      });\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n  configure() {\n    super.configure();\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n  getBasePixel() {\n    return this.bottom;\n  }\n}\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {\n    bounds,\n    step,\n    min,\n    max,\n    precision,\n    count,\n    maxTicks,\n    maxDigits,\n    includeBounds\n  } = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {\n    min: rmin,\n    max: rmax\n  } = dataRange;\n  const minDefined = !helpers_segment.isNullOrUndef(min);\n  const maxDefined = !helpers_segment.isNullOrUndef(max);\n  const countDefined = !helpers_segment.isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = helpers_segment.niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    spacing = helpers_segment.niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n  if (!helpers_segment.isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n  if (minDefined && maxDefined && step && helpers_segment.almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n    if (helpers_segment.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n  const decimalPlaces = Math.max(helpers_segment._decimalPlaces(spacing), helpers_segment._decimalPlaces(niceMin));\n  factor = Math.pow(10, helpers_segment.isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n      if (niceMin < min) {\n        j++;\n      }\n      if (helpers_segment.almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({\n      value: tickValue\n    });\n  }\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && helpers_segment.almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n  return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, {\n  horizontal,\n  minRotation\n}) {\n  const rad = helpers_segment.toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    if (helpers_segment.isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n    return +raw;\n  }\n  handleTickRangeOptions() {\n    const {\n      beginAtZero\n    } = this.options;\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (beginAtZero) {\n      const minSign = helpers_segment.sign(min);\n      const maxSign = helpers_segment.sign(max);\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n      setMax(max + offset);\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {\n      maxTicksLimit,\n      stepSize\n    } = tickOpts;\n    let maxTicks;\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n    return maxTicks;\n  }\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n    if (opts.bounds === 'ticks') {\n      helpers_segment._setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n  getLabelForValue(value) {\n    return helpers_segment.formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\nclass LinearScale extends LinearScaleBase {\n  static id = 'linear';\n  static defaults = {\n    ticks: {\n      callback: helpers_segment.Ticks.formatters.numeric\n    }\n  };\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = helpers_segment.isNumberFinite(min) ? min : 0;\n    this.max = helpers_segment.isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = helpers_segment.toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\nconst log10Floor = v => Math.floor(helpers_segment.log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n  const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n  return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\nfunction generateTicks(generationOptions, {\n  min,\n  max\n}) {\n  min = helpers_segment.finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = helpers_segment.finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({\n      value,\n      major: isMajor(value),\n      significand\n    });\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = helpers_segment.finiteOrDefault(generationOptions.max, value);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(lastTick),\n    significand\n  });\n  return ticks;\n}\nclass LogarithmicScale extends Scale {\n  static id = 'logarithmic';\n  static defaults = {\n    ticks: {\n      callback: helpers_segment.Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return helpers_segment.isNumberFinite(value) && value > 0 ? value : null;\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = helpers_segment.isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = helpers_segment.isNumberFinite(max) ? Math.max(0, max) : null;\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n    if (this._zero && this.min !== this._suggestedMin && !helpers_segment.isNumberFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n    this.handleTickRangeOptions();\n  }\n  handleTickRangeOptions() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n      setMax(changeExponent(min, +1));\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n    if (opts.bounds === 'ticks') {\n      helpers_segment._setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return value === undefined ? '0' : helpers_segment.formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = helpers_segment.log10(start);\n    this._valueRange = helpers_segment.log10(this.max) - helpers_segment.log10(start);\n  }\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min ? 0 : (helpers_segment.log10(value) - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n  if (tickOpts.display && opts.display) {\n    const padding = helpers_segment.toPadding(tickOpts.backdropPadding);\n    return helpers_segment.valueOrDefault(tickOpts.font && tickOpts.font.size, helpers_segment.defaults.font.size) + padding.height;\n  }\n  return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n  label = helpers_segment.isArray(label) ? label : [label];\n  return {\n    w: helpers_segment._longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? helpers_segment.PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = helpers_segment.toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    const angleRadians = helpers_segment._normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(helpers_segment.toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {\n    extra,\n    additionalAngle,\n    padding,\n    size\n  } = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(helpers_segment.toDegrees(helpers_segment._normalizeAngle(pointLabelPosition.angle + helpers_segment.HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    visible: true,\n    x: pointLabelPosition.x,\n    y,\n    textAlign,\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n  const apexesInArea = helpers_segment._isPointInArea({\n    x: left,\n    y: top\n  }, area) || helpers_segment._isPointInArea({\n    x: left,\n    y: bottom\n  }, area) || helpers_segment._isPointInArea({\n    x: right,\n    y: top\n  }, area) || helpers_segment._isPointInArea({\n    x: right,\n    y: bottom\n  }, area);\n  return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {\n    centerPointLabels,\n    display\n  } = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? helpers_segment.PI / valueCount : 0\n  };\n  let area;\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n  return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= w / 2;\n  }\n  return x;\n}\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= h / 2;\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n  const {\n    backdropColor\n  } = opts;\n  if (!helpers_segment.isNullOrUndef(backdropColor)) {\n    const borderRadius = helpers_segment.toTRBLCorners(opts.borderRadius);\n    const padding = helpers_segment.toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      helpers_segment.addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\nfunction drawPointLabels(scale, labelCount) {\n  const {\n    ctx,\n    options: {\n      pointLabels\n    }\n  } = scale;\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = helpers_segment.toFont(optsAtIndex.font);\n    const {\n      x,\n      y,\n      textAlign\n    } = item;\n    helpers_segment.renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {\n    ctx\n  } = scale;\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, helpers_segment.TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {\n    color,\n    lineWidth\n  } = gridLineOpts;\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n  return helpers_segment.createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\nclass RadialLinearScale extends LinearScaleBase {\n  static id = 'radialLinear';\n  static defaults = {\n    display: true,\n    animate: true,\n    position: 'chartArea',\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    grid: {\n      circular: false\n    },\n    startAngle: 0,\n    ticks: {\n      showLabelBackdrop: true,\n      callback: helpers_segment.Ticks.formatters.numeric\n    },\n    pointLabels: {\n      backdropColor: undefined,\n      backdropPadding: 2,\n      display: true,\n      font: {\n        size: 10\n      },\n      callback(label) {\n        return label;\n      },\n      padding: 5,\n      centerPointLabels: false\n    }\n  };\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n  setDimensions() {\n    const padding = this._padding = helpers_segment.toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(false);\n    this.min = helpers_segment.isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = helpers_segment.isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels().map((value, index) => {\n      const label = helpers_segment.callback(this.options.pointLabels.callback, [value, index], this);\n      return label || label === 0 ? label : '';\n    }).filter((v, i) => this.chart.getDataVisibility(i));\n  }\n  fit() {\n    const opts = this.options;\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n  getIndexAngle(index) {\n    const angleMultiplier = helpers_segment.TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return helpers_segment._normalizeAngle(index * angleMultiplier + helpers_segment.toRadians(startAngle));\n  }\n  getDistanceFromCenterForValue(value) {\n    if (helpers_segment.isNullOrUndef(value)) {\n      return NaN;\n    }\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n  getValueForDistanceFromCenter(distance) {\n    if (helpers_segment.isNullOrUndef(distance)) {\n      return NaN;\n    }\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - helpers_segment.HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n  getPointLabelPosition(index) {\n    const {\n      left,\n      top,\n      right,\n      bottom\n    } = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n  drawBackground() {\n    const {\n      backgroundColor,\n      grid: {\n        circular\n      }\n    } = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {\n      angleLines,\n      grid,\n      border\n    } = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n    if (angleLines.display) {\n      ctx.save();\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {\n          color,\n          lineWidth\n        } = optsAtIndex;\n        if (!lineWidth || !color) {\n          continue;\n        }\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n      ctx.restore();\n    }\n  }\n  drawBorder() {}\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    if (!tickOpts.display) {\n      return;\n    }\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = helpers_segment.toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = helpers_segment.toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n      }\n      helpers_segment.renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth\n      });\n    });\n    ctx.restore();\n  }\n  drawTitle() {}\n}\nconst INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nconst UNITS = /* #__PURE__ */Object.keys(INTERVALS);\nfunction sorter(a, b) {\n  return a - b;\n}\nfunction parse(scale, input) {\n  if (helpers_segment.isNullOrUndef(input)) {\n    return null;\n  }\n  const adapter = scale._adapter;\n  const {\n    parser,\n    round,\n    isoWeekday\n  } = scale._parseOpts;\n  let value = input;\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n  if (!helpers_segment.isNumberFinite(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n  if (value === null) {\n    return null;\n  }\n  if (round) {\n    value = round === 'week' && (helpers_segment.isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n  return +value;\n}\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n  return UNITS[ilen - 1];\n}\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {\n      lo,\n      hi\n    } = helpers_segment._lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n  static id = 'time';\n  static defaults = {\n    bounds: 'data',\n    adapters: {},\n    time: {\n      parser: false,\n      unit: false,\n      round: false,\n      isoWeekday: false,\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      source: 'auto',\n      callback: false,\n      major: {\n        enabled: false\n      }\n    }\n  };\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    adapter.init(opts);\n    helpers_segment.mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n    min = helpers_segment.isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = helpers_segment.isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {\n      min,\n      max\n    };\n  }\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n    const min = this.min;\n    const max = this.max;\n    const ticks = helpers_segment._filterBetween(timestamps, min, max);\n    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n    if (options.reverse) {\n      ticks.reverse();\n    }\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n  afterAutoSkip() {\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = helpers_segment._limitValue(start, 0, limit);\n    end = helpers_segment._limitValue(end, 0, limit);\n    this._offsets = {\n      start,\n      end,\n      factor: 1 / (start + 1 + end)\n    };\n  }\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = helpers_segment.valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = helpers_segment.isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n    if (formatter) {\n      return helpers_segment.callback(formatter, [time, index, ticks], this);\n    }\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = helpers_segment.toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n    return {\n      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n    };\n  }\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const metas = this.getMatchingVisibleMetas();\n    if (this._normalized && metas.length) {\n      return this._cache.data = metas[0].controller.getAllParsedValues(this);\n    }\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n    return this._cache.data = this.normalize(timestamps);\n  }\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n  }\n  normalize(values) {\n    return helpers_segment._arrayUnique(values.sort(sorter));\n  }\n}\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({\n        lo,\n        hi\n      } = helpers_segment._lookupByKey(table, 'pos', val));\n    }\n    ({\n      pos: prevSource,\n      time: prevTarget\n    } = table[lo]);\n    ({\n      pos: nextSource,\n      time: nextTarget\n    } = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({\n        lo,\n        hi\n      } = helpers_segment._lookupByKey(table, 'time', val));\n    }\n    ({\n      time: prevSource,\n      pos: prevTarget\n    } = table[lo]);\n    ({\n      time: nextSource,\n      pos: nextTarget\n    } = table[hi]);\n  }\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n  static id = 'timeseries';\n  static defaults = TimeScale.defaults;\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n  buildLookupTable(timestamps) {\n    const {\n      min,\n      max\n    } = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n    if (items.length < 2) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n    return table;\n  }\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n    return timestamps.sort((a, b) => a - b);\n  }\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nconst registerables = [controllers, elements, plugins, scales];\nexports.Ticks = helpers_segment.Ticks;\nexports.defaults = helpers_segment.defaults;\nexports.Animation = Animation;\nexports.Animations = Animations;\nexports.ArcElement = ArcElement;\nexports.BarController = BarController;\nexports.BarElement = BarElement;\nexports.BasePlatform = BasePlatform;\nexports.BasicPlatform = BasicPlatform;\nexports.BubbleController = BubbleController;\nexports.CategoryScale = CategoryScale;\nexports.Chart = Chart;\nexports.Colors = plugin_colors;\nexports.DatasetController = DatasetController;\nexports.Decimation = plugin_decimation;\nexports.DomPlatform = DomPlatform;\nexports.DoughnutController = DoughnutController;\nexports.Element = Element;\nexports.Filler = index;\nexports.Interaction = Interaction;\nexports.Legend = plugin_legend;\nexports.LineController = LineController;\nexports.LineElement = LineElement;\nexports.LinearScale = LinearScale;\nexports.LogarithmicScale = LogarithmicScale;\nexports.PieController = PieController;\nexports.PointElement = PointElement;\nexports.PolarAreaController = PolarAreaController;\nexports.RadarController = RadarController;\nexports.RadialLinearScale = RadialLinearScale;\nexports.Scale = Scale;\nexports.ScatterController = ScatterController;\nexports.SubTitle = plugin_subtitle;\nexports.TimeScale = TimeScale;\nexports.TimeSeriesScale = TimeSeriesScale;\nexports.Title = plugin_title;\nexports.Tooltip = plugin_tooltip;\nexports._adapters = adapters;\nexports._detectPlatform = _detectPlatform;\nexports.animator = animator;\nexports.controllers = controllers;\nexports.elements = elements;\nexports.layouts = layouts;\nexports.plugins = plugins;\nexports.registerables = registerables;\nexports.registry = registry;\nexports.scales = scales;","map":{"version":3,"names":["helpers_segment","require","Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","requestAnimFrame","call","window","_update","Date","now","remaining","running","items","length","i","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","animator","transparent","interpolators","boolean","from","to","factor","color","c0","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","resolve","_fn","_easing","effects","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","getOwnPropertyNames","key","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","isNumberFinite","sign","convertObjectDataToArray","data","adata","Array","isStacked","meta","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","datasetElementType","dataElementType","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","new","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","defined","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","inflateAmount","BarController","grouped","numbers","overrides","_index_","offset","grid","_value_","beginAtZero","iAxisKey","vAxisKey","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","skipNull","val","isNaN","indexOf","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","animateRotate","animateScale","spacing","descriptors","_scriptable","_indexable","startsWith","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","borderWidth","onClick","e","legendItem","toggleDataVisibility","innerRadius","outerRadius","getter","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","toDimension","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","arc","metaData","formatNumber","locale","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","LineController","showLine","spanGaps","line","_dataset","animationsDisabled","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","segment","animated","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","angleLines","display","circular","pointLabels","_parseObjectDataRadialScale","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","interaction","registry","getElement","controllers","__proto__","abstract","Error","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","adapters","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","getProps","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","defaultRoutes","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","result","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","finiteOrDefault","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","callback","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","clipArea","renderTextOptions","renderText","unclipArea","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","merge","routeDefaults","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","d","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","isFunction","subResolver","_attachContext","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","version","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getSizeForArea","field","getDatasetArea","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","uid","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","resizeDelay","_initialize","maintainAspectRatio","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","setsEqual","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","_isClickEvent","onHover","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","_readValueToProps","parseBorderRadius$1","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","betweenAngles","withinRadius","_isBetween","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","capBezierPoints","_points","_segments","_pointsUpdated","_updateBezierControlPoints","_computeSegments","interpolate","_boundSegments","_interpolate","interpolated","inRange$1","hitRadius","PointElement","hoverRadius","mouseX","mouseY","inXRange","inYRange","drawPoint","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","parseBorderRadius","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","addRectPath","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","containsColorsDefinition","plugin_colors","forceOverride","_args","chartOptions","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","plugin_decimation","algorithm","beforeElementsUpdate","xAxis","threshold","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","_boundSegment","fillSource","_getEdge","_normalizeAngle","_pointsFromSegments","boundary","linePoints","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","clipVertical","clipY","lineLoop","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","getRtlAdapter","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","plugin_legend","_element","afterEvent","ci","useBorderRadius","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","plugin_title","WeakMap","plugin_subtitle","positioners","average","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","_fallback","Colors","Decimation","Filler","SubTitle","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","isFinite","generateTicks$1","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","tickValue","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","generateTicks","minExp","exp","significand","lastTick","LogarithmicScale","logarithmic","_zero","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","createPointLabelItem","itemOpts","outerDistance","extra","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","isNotOverlapped","apexesInArea","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawPointLabels","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","animate","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables","exports","_adapters"],"sources":["C:/Users/Ana/Desktop/7.SEMESTAR/pia/projekat/frontend/node_modules/chart.js/dist/chart.cjs"],"sourcesContent":["/*!\n * Chart.js v4.4.1\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */\n'use strict';\n\nvar helpers_segment = require('./chunks/helpers.segment.cjs');\nrequire('@kurkle/color');\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = helpers_segment.requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = helpers_segment.color(from || transparent);\n        const c1 = c0.valid && helpers_segment.color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = helpers_segment.resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = helpers_segment.resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = helpers_segment.effects[cfg.easing] || helpers_segment.effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = helpers_segment.resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = helpers_segment.resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!helpers_segment.isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(helpers_segment.defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!helpers_segment.isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (helpers_segment.isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (helpers_segment.isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (helpers_segment.isNumberFinite(otherValue) && (singleMode || value === 0 || helpers_segment.sign(value) === helpers_segment.sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data) {\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            x: key,\n            y: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return helpers_segment.createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return helpers_segment.createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = helpers_segment.valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = helpers_segment.valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = helpers_segment.valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            helpers_segment.unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (helpers_segment.isObject(data)) {\n            this._data = convertObjectDataToArray(data);\n        } else if (_data !== data) {\n            if (_data) {\n                helpers_segment.unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                helpers_segment.listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (helpers_segment.isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (helpers_segment.isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(helpers_segment.resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(helpers_segment.resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !helpers_segment.isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (helpers_segment.isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(helpers_segment.valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && helpers_segment.defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(helpers_segment.defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = helpers_segment._arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (helpers_segment.defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (helpers_segment.isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (helpers_segment.isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return helpers_segment.sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(helpers_segment.resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(helpers_segment.resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || helpers_segment.isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const skipNull = (meta)=>{\n            const parsed = meta.controller.getParsed(dataIndex);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (helpers_segment.isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && helpers_segment.sign(value) !== helpers_segment.sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !helpers_segment.isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = helpers_segment.sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = helpers_segment.valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = helpers_segment.valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = helpers_segment.valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += helpers_segment.valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < helpers_segment.TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>helpers_segment._angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>helpers_segment._angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(helpers_segment.HALF_PI, startY, endY);\n        const minX = calcMin(helpers_segment.PI, startX, endX);\n        const minY = calcMin(helpers_segment.PI + helpers_segment.HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (helpers_segment.isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+helpers_segment.resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return helpers_segment.toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return helpers_segment.toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = helpers_segment.TAU;\n        let max = -helpers_segment.TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(helpers_segment.toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = helpers_segment.toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / helpers_segment.TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return helpers_segment.TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = helpers_segment.formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(helpers_segment.valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = helpers_segment._getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (helpers_segment._scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = helpers_segment.isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = helpers_segment.isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = helpers_segment.formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return helpers_segment._parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * helpers_segment.PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? helpers_segment.toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return helpers_segment._parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = helpers_segment._getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (helpers_segment._scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) {\n                this.addElements();\n            }\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = helpers_segment.isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = helpers_segment.isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? helpers_segment._rlookupByKey : helpers_segment._lookupByKey;\n        if (!intersect) {\n            return lookupMethod(data, axis, value);\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !helpers_segment._isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = helpers_segment.getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (helpers_segment._angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = helpers_segment.getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = helpers_segment.getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = helpers_segment.getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = helpers_segment.getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = helpers_segment.getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = helpers_segment.getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!helpers_segment.isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (helpers_segment.defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (helpers_segment.defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = helpers_segment.toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        helpers_segment.each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, helpers_segment.toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        helpers_segment.each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = helpers_segment.readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = helpers_segment.readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = helpers_segment.supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = helpers_segment.getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && helpers_segment._getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = helpers_segment.throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = helpers_segment.throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (helpers_segment.isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return helpers_segment.getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = helpers_segment._getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!helpers_segment._isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return helpers_segment.isNumber(this.x) && helpers_segment.isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, helpers_segment.isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, helpers_segment.isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = helpers_segment._factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = helpers_segment.valueOrDefault(majorStart, 0);\n    const end = Math.min(helpers_segment.valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    helpers_segment.each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = helpers_segment.toFont(options.font, fallback);\n    const padding = helpers_segment.toPadding(options.padding);\n    const lines = helpers_segment.isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return helpers_segment.createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return helpers_segment.createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = helpers_segment._toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = helpers_segment._alignStartEnd(align, left, right);\n        if (helpers_segment.isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (helpers_segment.isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = helpers_segment._alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -helpers_segment.HALF_PI : helpers_segment.HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = helpers_segment.finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = helpers_segment.finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = helpers_segment.finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = helpers_segment.finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: helpers_segment.finiteOrDefault(_userMin, _suggestedMin),\n            max: helpers_segment.finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: helpers_segment.isNumberFinite(_userMin),\n            maxDefined: helpers_segment.isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: helpers_segment.finiteOrDefault(min, helpers_segment.finiteOrDefault(max, min)),\n            max: helpers_segment.finiteOrDefault(max, helpers_segment.finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        helpers_segment.callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = helpers_segment._addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        helpers_segment.callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        helpers_segment.callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        helpers_segment.callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        helpers_segment.callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        helpers_segment.callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = helpers_segment.callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        helpers_segment.callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        helpers_segment.callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = helpers_segment._limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = helpers_segment.toDegrees(Math.min(Math.asin(helpers_segment._limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(helpers_segment._limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(helpers_segment._limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        helpers_segment.callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        helpers_segment.callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = helpers_segment.toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        helpers_segment.callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (helpers_segment.isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!helpers_segment.isNullOrUndef(label) && !helpers_segment.isArray(label)) {\n                width = helpers_segment._measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (helpers_segment.isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!helpers_segment.isNullOrUndef(nestedLabel) && !helpers_segment.isArray(nestedLabel)) {\n                        width = helpers_segment._measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return helpers_segment._int16Range(this._alignToPixels ? helpers_segment._alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = helpers_segment.toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return helpers_segment._alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (helpers_segment.isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (helpers_segment.isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = helpers_segment.valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = helpers_segment._alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -helpers_segment.toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (helpers_segment.isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (helpers_segment.isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = helpers_segment.isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = helpers_segment.toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                    case 'inner':\n                        if (i === ilen - 1) {\n                            left -= width;\n                        } else if (i > 0) {\n                            left -= width / 2;\n                        }\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -helpers_segment.toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = helpers_segment._alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = helpers_segment._alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = helpers_segment._alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = helpers_segment._alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            helpers_segment.clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            helpers_segment.renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            helpers_segment.unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = helpers_segment.toFont(title.font);\n        const padding = helpers_segment.toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || helpers_segment.isObject(position)) {\n            offset += padding.bottom;\n            if (helpers_segment.isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        helpers_segment.renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = helpers_segment.valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = helpers_segment.valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return helpers_segment.toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            helpers_segment.defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in helpers_segment.defaults[scope]) {\n            delete helpers_segment.defaults[scope][id];\n            if (this.override) {\n                delete helpers_segment.overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = helpers_segment.merge(Object.create(null), [\n        parentScope ? helpers_segment.defaults.get(parentScope) : {},\n        helpers_segment.defaults.get(scope),\n        item.defaults\n    ]);\n    helpers_segment.defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        helpers_segment.defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        helpers_segment.defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                helpers_segment.each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = helpers_segment._capitalize(method);\n        helpers_segment.callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        helpers_segment.callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (helpers_segment.callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!helpers_segment.isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = helpers_segment.valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = helpers_segment.defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = helpers_segment.overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!helpers_segment.isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), helpers_segment.defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = helpers_segment.mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = helpers_segment.overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            helpers_segment.mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        helpers_segment.mergeIf(scale, [\n            helpers_segment.defaults.scales[scale.type],\n            helpers_segment.defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = helpers_segment.valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = helpers_segment.resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, helpers_segment.overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, helpers_segment.defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, helpers_segment.descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            helpers_segment.overrides[type] || {},\n            helpers_segment.defaults.datasets[type] || {},\n            {\n                type\n            },\n            helpers_segment.defaults,\n            helpers_segment.descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = helpers_segment.isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = helpers_segment._attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return helpers_segment.isObject(context) ? helpers_segment._attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = helpers_segment._createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>helpers_segment.isObject(value) && Object.getOwnPropertyNames(value).some((key)=>helpers_segment.isFunction(value[key]));\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = helpers_segment._descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (helpers_segment.isFunction(value) || hasFunction(value)) || indexable && helpers_segment.isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.4.1\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    helpers_segment.callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    helpers_segment.callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (helpers_segment._isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nfunction getSizeForArea(scale, chartArea, field) {\n    return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: getSizeForArea(xScale, chartArea, 'left'),\n            right: getSizeForArea(xScale, chartArea, 'right'),\n            top: getSizeForArea(yScale, chartArea, 'top'),\n            bottom: getSizeForArea(yScale, chartArea, 'bottom')\n        };\n    }\n    return chartArea;\n}\nclass Chart {\n    static defaults = helpers_segment.defaults;\n    static instances = instances;\n    static overrides = helpers_segment.overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = helpers_segment.uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = helpers_segment.debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!helpers_segment.isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            helpers_segment.retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        helpers_segment.clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!helpers_segment.retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        helpers_segment.callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        helpers_segment.each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        helpers_segment.each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = helpers_segment.valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        helpers_segment.each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        helpers_segment.each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = helpers_segment.defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        helpers_segment.each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            helpers_segment.each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        helpers_segment.each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!helpers_segment.setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!helpers_segment.setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        helpers_segment.each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, helpers_segment.isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resize(width, height);\n            this._resizeBeforeDraw = null;\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const clip = meta._clip;\n        const useClip = !clip.disabled;\n        const area = getDatasetArea(meta, this.chartArea);\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (useClip) {\n            helpers_segment.clipArea(ctx, {\n                left: clip.left === false ? 0 : area.left - clip.left,\n                right: clip.right === false ? this.width : area.right + clip.right,\n                top: clip.top === false ? 0 : area.top - clip.top,\n                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n            });\n        }\n        meta.controller.draw();\n        if (useClip) {\n            helpers_segment.unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return helpers_segment._isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = helpers_segment.createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (helpers_segment.defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            helpers_segment.clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        helpers_segment.each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        helpers_segment.each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        helpers_segment.each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !helpers_segment._elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = helpers_segment._isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            helpers_segment.callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                helpers_segment.callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !helpers_segment._elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return helpers_segment.each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + helpers_segment.HALF_PI, startAngle - helpers_segment.HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return helpers_segment._readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return helpers_segment._limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: helpers_segment._limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: helpers_segment._limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / helpers_segment.PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + helpers_segment.HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + helpers_segment.HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - helpers_segment.HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - helpers_segment.HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % helpers_segment.TAU || helpers_segment.TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % helpers_segment.TAU || helpers_segment.TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = helpers_segment.getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = helpers_segment.valueOrDefault(circumference, endAngle - startAngle);\n        const betweenAngles = _circumference >= helpers_segment.TAU || helpers_segment._angleBetween(angle, startAngle, endAngle);\n        const withinRadius = helpers_segment._isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > helpers_segment.TAU ? Math.floor(circumference / helpers_segment.TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(helpers_segment.PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = helpers_segment.valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(helpers_segment.valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = helpers_segment.valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = helpers_segment.valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = helpers_segment.valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = helpers_segment.valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return helpers_segment._steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return helpers_segment._bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return helpers_segment._steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return helpers_segment._bezierInterpolation;\n    }\n    return helpers_segment._pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            helpers_segment._updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = helpers_segment._computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = helpers_segment._boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !helpers_segment._isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        helpers_segment.drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : helpers_segment._limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = helpers_segment.toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = helpers_segment.toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || helpers_segment.isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || helpers_segment._isBetween(x, bounds.left, bounds.right)) && (skipY || helpers_segment._isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? helpers_segment.addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!helpers_segment.isNullOrUndef(minIndex) && !helpers_segment.isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = helpers_segment._limitValue(helpers_segment._lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = helpers_segment._limitValue(helpers_segment._lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (helpers_segment.resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (helpers_segment.isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = helpers_segment._boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = helpers_segment._boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = helpers_segment._normalizeAngle(start);\n        end = helpers_segment._normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (helpers_segment.isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!helpers_segment.isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (helpers_segment.isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (helpers_segment.isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (helpers_segment.isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (helpers_segment.isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = helpers_segment.valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (helpers_segment._isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: helpers_segment.TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (helpers_segment.isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (helpers_segment.isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    if (target && line.points.length) {\n        helpers_segment.clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis\n        });\n        helpers_segment.unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n        clipVertical(ctx, target, area.top);\n        fill(ctx, {\n            line,\n            target,\n            color: above,\n            scale,\n            property\n        });\n        ctx.restore();\n        ctx.save();\n        clipVertical(ctx, target, area.bottom);\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, bounds) {\n    const { top , bottom  } = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x') {\n        ctx.beginPath();\n        ctx.rect(start, top, end - start, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = helpers_segment.callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = helpers_segment.toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = helpers_segment.getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = helpers_segment._alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = helpers_segment._alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = helpers_segment._alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = helpers_segment._alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            helpers_segment.clipArea(ctx, this);\n            this._draw();\n            helpers_segment.unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = helpers_segment.defaults.color;\n        const rtlHelper = helpers_segment.getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = helpers_segment.toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = helpers_segment.valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = helpers_segment.valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = helpers_segment.valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = helpers_segment.valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = helpers_segment.valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = helpers_segment.valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(helpers_segment.valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                helpers_segment.drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = helpers_segment.toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    helpers_segment.addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            helpers_segment.renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: helpers_segment._alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: helpers_segment._alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        helpers_segment.overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = helpers_segment._alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = helpers_segment._alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = helpers_segment._textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        helpers_segment.restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = helpers_segment.toFont(titleOpts.font);\n        const titlePadding = helpers_segment.toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = helpers_segment.getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = helpers_segment._alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + helpers_segment._alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = helpers_segment._alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(helpers_segment._toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        helpers_segment.renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = helpers_segment.toFont(titleOpts.font);\n        const titlePadding = helpers_segment.toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (helpers_segment._isBetween(x, this.left, this.right) && helpers_segment._isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (helpers_segment._isBetween(x, hitBox.left, hitBox.left + hitBox.width) && helpers_segment._isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                helpers_segment.callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                helpers_segment.callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            helpers_segment.callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = helpers_segment.toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = helpers_segment.isArray(opts.text) ? opts.text.length : 1;\n        this._padding = helpers_segment.toPadding(opts.padding);\n        const textSize = lineCount * helpers_segment.toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = helpers_segment._alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = helpers_segment._alignStartEnd(align, bottom, top);\n                rotation = helpers_segment.PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = helpers_segment._alignStartEnd(align, top, bottom);\n                rotation = helpers_segment.PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = helpers_segment.toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        helpers_segment.renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: helpers_segment._toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let x = 0;\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                x += pos.x;\n                y += pos.y;\n                ++count;\n            }\n        }\n        return {\n            x: x / count,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = helpers_segment.distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (helpers_segment.isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = helpers_segment.toFont(options.bodyFont);\n    const titleFont = helpers_segment.toFont(options.titleFont);\n    const footerFont = helpers_segment.toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = helpers_segment.toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    helpers_segment.each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    helpers_segment.each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    helpers_segment.each(body, (bodyItem)=>{\n        helpers_segment.each(bodyItem.before, maxLineWidth);\n        helpers_segment.each(bodyItem.lines, maxLineWidth);\n        helpers_segment.each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    helpers_segment.each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = helpers_segment.toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: helpers_segment._limitValue(x, 0, chart.width - size.width),\n        y: helpers_segment._limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = helpers_segment.toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return helpers_segment.createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: helpers_segment.noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: helpers_segment.noop,\n    beforeBody: helpers_segment.noop,\n    beforeLabel: helpers_segment.noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!helpers_segment.isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: helpers_segment.noop,\n    afterBody: helpers_segment.noop,\n    beforeFooter: helpers_segment.noop,\n    footer: helpers_segment.noop,\n    afterFooter: helpers_segment.noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        helpers_segment.each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        helpers_segment.each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = helpers_segment.toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = helpers_segment.getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = helpers_segment.toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = helpers_segment.toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            helpers_segment.drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            helpers_segment.drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = helpers_segment.isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = helpers_segment.toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                helpers_segment.addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                helpers_segment.addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = helpers_segment.toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = helpers_segment.getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        helpers_segment.each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            helpers_segment.each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            helpers_segment.each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        helpers_segment.each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = helpers_segment.getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = helpers_segment.toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = helpers_segment.toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = helpers_segment.toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            helpers_segment.overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            helpers_segment.restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !helpers_segment._elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !helpers_segment._elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : helpers_segment._limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (helpers_segment.isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, helpers_segment.valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !helpers_segment.isNullOrUndef(min);\n    const maxDefined = !helpers_segment.isNullOrUndef(max);\n    const countDefined = !helpers_segment.isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = helpers_segment.niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = helpers_segment.niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!helpers_segment.isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && helpers_segment.almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (helpers_segment.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(helpers_segment._decimalPlaces(spacing), helpers_segment._decimalPlaces(niceMin));\n    factor = Math.pow(10, helpers_segment.isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (helpers_segment.almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && helpers_segment.almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = helpers_segment.toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (helpers_segment.isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = helpers_segment.sign(min);\n            const maxSign = helpers_segment.sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            helpers_segment._setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return helpers_segment.formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: helpers_segment.Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = helpers_segment.isNumberFinite(min) ? min : 0;\n        this.max = helpers_segment.isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = helpers_segment.toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(helpers_segment.log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = helpers_segment.finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = helpers_segment.finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = helpers_segment.finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: helpers_segment.Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return helpers_segment.isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = helpers_segment.isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = helpers_segment.isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !helpers_segment.isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            helpers_segment._setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : helpers_segment.formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = helpers_segment.log10(start);\n        this._valueRange = helpers_segment.log10(this.max) - helpers_segment.log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (helpers_segment.log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = helpers_segment.toPadding(tickOpts.backdropPadding);\n        return helpers_segment.valueOrDefault(tickOpts.font && tickOpts.font.size, helpers_segment.defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = helpers_segment.isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: helpers_segment._longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? helpers_segment.PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = helpers_segment.toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = helpers_segment._normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(helpers_segment.toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(helpers_segment.toDegrees(helpers_segment._normalizeAngle(pointLabelPosition.angle + helpers_segment.HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = helpers_segment._isPointInArea({\n        x: left,\n        y: top\n    }, area) || helpers_segment._isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || helpers_segment._isPointInArea({\n        x: right,\n        y: top\n    }, area) || helpers_segment._isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? helpers_segment.PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!helpers_segment.isNullOrUndef(backdropColor)) {\n        const borderRadius = helpers_segment.toTRBLCorners(opts.borderRadius);\n        const padding = helpers_segment.toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            helpers_segment.addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = helpers_segment.toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        helpers_segment.renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, helpers_segment.TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return helpers_segment.createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: helpers_segment.Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = helpers_segment.toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = helpers_segment.isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = helpers_segment.isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = helpers_segment.callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = helpers_segment.TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return helpers_segment._normalizeAngle(index * angleMultiplier + helpers_segment.toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (helpers_segment.isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (helpers_segment.isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - helpers_segment.HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = helpers_segment.toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = helpers_segment.toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            helpers_segment.renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (helpers_segment.isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!helpers_segment.isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (helpers_segment.isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = helpers_segment._lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        helpers_segment.mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = helpers_segment.isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = helpers_segment.isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = helpers_segment._filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = helpers_segment._limitValue(start, 0, limit);\n        end = helpers_segment._limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = helpers_segment.valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = helpers_segment.isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return helpers_segment.callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = helpers_segment.toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return helpers_segment._arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = helpers_segment._lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = helpers_segment._lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) {\n            timestamps.splice(0, 0, min);\n        }\n        if (!timestamps.includes(max) || timestamps.length === 1) {\n            timestamps.push(max);\n        }\n        return timestamps.sort((a, b)=>a - b);\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexports.Ticks = helpers_segment.Ticks;\nexports.defaults = helpers_segment.defaults;\nexports.Animation = Animation;\nexports.Animations = Animations;\nexports.ArcElement = ArcElement;\nexports.BarController = BarController;\nexports.BarElement = BarElement;\nexports.BasePlatform = BasePlatform;\nexports.BasicPlatform = BasicPlatform;\nexports.BubbleController = BubbleController;\nexports.CategoryScale = CategoryScale;\nexports.Chart = Chart;\nexports.Colors = plugin_colors;\nexports.DatasetController = DatasetController;\nexports.Decimation = plugin_decimation;\nexports.DomPlatform = DomPlatform;\nexports.DoughnutController = DoughnutController;\nexports.Element = Element;\nexports.Filler = index;\nexports.Interaction = Interaction;\nexports.Legend = plugin_legend;\nexports.LineController = LineController;\nexports.LineElement = LineElement;\nexports.LinearScale = LinearScale;\nexports.LogarithmicScale = LogarithmicScale;\nexports.PieController = PieController;\nexports.PointElement = PointElement;\nexports.PolarAreaController = PolarAreaController;\nexports.RadarController = RadarController;\nexports.RadialLinearScale = RadialLinearScale;\nexports.Scale = Scale;\nexports.ScatterController = ScatterController;\nexports.SubTitle = plugin_subtitle;\nexports.TimeScale = TimeScale;\nexports.TimeSeriesScale = TimeSeriesScale;\nexports.Title = plugin_title;\nexports.Tooltip = plugin_tooltip;\nexports._adapters = adapters;\nexports._detectPlatform = _detectPlatform;\nexports.animator = animator;\nexports.controllers = controllers;\nexports.elements = elements;\nexports.layouts = layouts;\nexports.plugins = plugins;\nexports.registerables = registerables;\nexports.registry = registry;\nexports.scales = scales;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}