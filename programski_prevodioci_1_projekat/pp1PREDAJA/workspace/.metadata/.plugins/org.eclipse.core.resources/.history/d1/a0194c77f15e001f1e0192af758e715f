package rs.ac.bg.etf.pp1;

import org.apache.log4j.Logger;

import rs.ac.bg.etf.pp1.ast.*;
import rs.etf.pp1.symboltable.*;
import rs.etf.pp1.symboltable.concepts.*;

public class SemanticAnalyzer extends VisitorAdaptor {
	
	int printSimpleCallCount = 0;
	int VarDeclSimpleCount = 0;
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
	
	public void report_error(String message, SyntaxNode info) {
		errorDetected = true;
		StringBuilder msg = new StringBuilder(message);
		int line = (info == null) ? 0: info.getLine();
		if (line != 0)
			msg.append (" na liniji ").append(line);
		log.error(msg.toString());
	}

	public void report_info(String message, SyntaxNode info) {
		StringBuilder msg = new StringBuilder(message); 
		int line = (info == null) ? 0: info.getLine();
		if (line != 0)
			msg.append (" na liniji ").append(line);
		log.info(msg.toString());
	}
	
	//------------------------------------------------------------------------------------------------VISIT METODE
	
	// **** PROGRAM ****
	
	
	
	public void visit(ProgramName programName) {
		Tab.insert(Obj.Prog, programName.getProgramName(), Tab.noType); 
		Tab.openScope(); 
		// otvara se Scope i vezuje se kasnije za programName objekat koji smo sad kreirali
	}
	
	public void visit(Program program) {
		Tab.chainLocalSymbols(program.getProgramName().obj); 
		// vezujemo za programName objekat koji iz programa koji je i sam objekat dohvatamo kao objekat
		Tab.closeScope();
	}
	
	// *****************

	public void visit(VarDeclSimple varDeclSimple){
		VarDeclSimpleCount++;
	}
	
    public void visit(MatchedPrintSimple printSimple) {
		printSimpleCallCount++;
	}

}
