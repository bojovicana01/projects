package rs.ac.bg.etf.pp1;

import org.apache.log4j.Logger;

import rs.ac.bg.etf.pp1.ast.*;
import rs.etf.pp1.symboltable.*;
import rs.etf.pp1.symboltable.concepts.*;

public class SemanticAnalyzer extends VisitorAdaptor {
	
	Obj currentMethod = null;
	boolean returnFound = false;
	
	Obj currentConstant = null;
	Struct currentConstantType = null;
	
	Struct currentVarType = null;
	
	boolean errorDetected = false;
	int nVars;
	
	Logger log = Logger.getLogger(getClass());
	
	public void report_error(String message, SyntaxNode info) {
		errorDetected = true;
		StringBuilder msg = new StringBuilder(message);
		int line = (info == null) ? 0: info.getLine();
		if (line != 0)
			msg.append (" na liniji ").append(line);
		log.error(msg.toString());
	}

	public void report_info(String message, SyntaxNode info) {
		StringBuilder msg = new StringBuilder(message); 
		int line = (info == null) ? 0: info.getLine();
		if (line != 0)
			msg.append (" na liniji ").append(line);
		log.info(msg.toString());
	}
	
	//------------------------------------------------------------------------------------------------VISIT METODE
	
	
	
	
	// **** PROGRAM **********************************************************************************************
	
	public void visit(ProgramName programName) {
		SymbolTableTab.insert(Obj.Prog, programName.getProgramName(), Tab.noType); 
		SymbolTableTab.openScope(); 
		// otvara se Scope i vezuje se kasnije za programName objekat koji smo sad kreirali
	}
	
	public void visit(Program program) {
		nVars = SymbolTableTab.currentScope.getnVars();
		SymbolTableTab.chainLocalSymbols(program.getProgramName().obj); 
		// vezujemo za programName objekat koji iz programa koji je i sam objekat dohvatamo kao objekat
		SymbolTableTab.closeScope();
	}
	
	// ***********************************************************************************************************
	
	
	
	
	// **** TYPE *************************************************************************************************
	
	public void visit(TypeSimple typeSimple) {
		
		Obj typeNode = SymbolTableTab.find(typeSimple.getTypeNameSimple());
		
		if (typeNode == Tab.noObj) { 
			report_error("Nije pronadjen tip " + typeSimple.getTypeNameSimple() + " u tabeli simbola! ", null);
			typeSimple.struct = Tab.noType;
		}
		else {
			if (Obj.Type == typeNode.getKind()) {
				typeSimple.struct = typeNode.getType();
			}
			else {
				report_error("Greska: Ime " + typeSimple.getTypeNameSimple() + " ne predstavlja tip!", typeSimple);
    			typeSimple.struct = Tab.noType;
			}
		}
		
	}
	
	public void visit(TypeNamespaceResolution typeNamespaceResolution) {
		
		Obj typeNode = SymbolTableTab.find(typeNamespaceResolution.getTypeNameNSR());
		
		if (typeNode == Tab.noObj) { 
			report_error("Nije pronadjen tip " + typeNamespaceResolution.getTypeNameNSR() + " u tabeli simbola! ", null);
			typeNamespaceResolution.struct = Tab.noType;
		}
		else {
			if (Obj.Type == typeNode.getKind()) {
				typeNamespaceResolution.struct = typeNode.getType();
			}
			else {
				report_error("Greska: Ime " + typeNamespaceResolution.getTypeNameNSR() + " ne predstavlja tip!", typeNamespaceResolution);
				typeNamespaceResolution.struct = Tab.noType;
			}
		}
		
	}
	
	// ***********************************************************************************************************
	
	
	
	
	// **** CONSTANTS ********************************************************************************************
	
	public void visit(ConstantTypeName constantTypeName) {
		currentConstantType = constantTypeName.getType().struct;
		currentConstant = SymbolTableTab.insert(Obj.Con, constantTypeName.getConstantName(), constantTypeName.getType().struct);
	}
	
	public void visit(EConstDeclListSingleType eConstDeclListSingleType) {
		currentConstant = SymbolTableTab.insert(Obj.Con, eConstDeclListSingleType.getConstantName(), currentConstantType);
	}
	
	public void visit(CNumConst cNumConst) {
		if (currentConstant != null) currentConstant.setAdr(cNumConst.getValue());
	}
	
	public void visit(CBoolConst cBoolConst) {
		if (currentConstant != null) currentConstant.setAdr(cBoolConst.getValue() == true ? 1 : 0);
	}
	
	public void visit(CCharConst cCharConst) {
		if (currentConstant != null) currentConstant.setAdr(cCharConst.getValue());
	}
	
	public void visit(EConstDecl eConstDecl) {
		currentConstantType = null;
		currentConstant = null;
	}
	
	// ***********************************************************************************************************
	
	
	
	
	// **** VARS *************************************************************************************************
	
	public void visit(VarTypeName varTypeName) {
		currentVarType = varTypeName.getType().struct;
		varTypeName.obj = SymbolTableTab.insert(Obj.Var, varTypeName.getVarName(), varTypeName.getType().struct);
		report_info("Deklarisana promenljiva "+ varTypeName.getVarName(), varTypeName);
	}
	
	public void visit(VarName varName) {
		SymbolTableTab.insert(Obj.Var, varName.getVarName(), currentVarType);
	}
	
	public void visit(VarDeclSimple varDeclSimple) {
		currentVarType = null;
	}
	
	public void visit(VarDeclArr varDeclArr) {
		currentVarType = null;
	}
	
	// ***********************************************************************************************************
	
	
	
	
	// **** METHODS **********************************************************************************************
	
	public void visit(EMethodTypeName eMethodTypeName) {
		currentMethod = SymbolTableTab.insert(Obj.Meth, eMethodTypeName.getMethName(), eMethodTypeName.getType().struct); 
		eMethodTypeName.obj = currentMethod;
		SymbolTableTab.openScope();
		report_info("Obradjuje se funkcija " + eMethodTypeName.getMethName(), eMethodTypeName);
	}
	
	public void visit(VoidMethodTypeName voidMethodTypeName) {
		currentMethod = SymbolTableTab.insert(Obj.Meth, voidMethodTypeName.getVmethName(), Tab.noType); 
		voidMethodTypeName.obj = currentMethod;
		SymbolTableTab.openScope();
		report_info("Obradjuje se funkcija " + voidMethodTypeName.getVmethName(), voidMethodTypeName);
	}
	
	public void visit(MethodDecl methodDecl) {
		if (!returnFound && currentMethod.getType() != SymbolTableTab.noType) // ako metoda treba nesto da vraca a ne vraca
			report_error("Semanticka greska na liniji " + methodDecl.getLine() + ": funkcija " + currentMethod.getName() + " nema return iskaz!", null);
		
		SymbolTableTab.chainLocalSymbols(currentMethod); // sve koje su na currentScope-u uvezuje u locals niz
		SymbolTableTab.closeScope();
		
		returnFound = false;
    	currentMethod = null;
	}
	
	// ***********************************************************************************************************
	
	
	
	
	// **** EXPR *************************************************************************************************
	
	public void visit(FactorNumConst factorNumConst) {
		factorNumConst.struct = SymbolTableTab.intType;
	}
	
	public void visit(FactorCharConst factorCharConst) {
		factorCharConst.struct = SymbolTableTab.charType;
	}

	public void visit(FactorBoolConst factorBoolConst) {
		factorBoolConst.struct = SymbolTableTab.boolType;
	}
	
	public void visit(FactorDesignatorVar factorDesignatorVar) {
		factorDesignatorVar.struct = factorDesignatorVar.getDesignator().obj.getType();
	}
	
	public void visit(FactorDesignatorFunc factorDesignatorFunc) {
		Obj func = factorDesignatorFunc.getDesignator().obj;
		
		if (Obj.Meth == func.getKind()) {
			report_info("Pronadjen poziv funkcije " + func.getName() + " na liniji " + factorDesignatorFunc.getLine(), null);
			factorDesignatorFunc.struct = func.getType();
		}
		else {
			report_error("Greska na liniji " + factorDesignatorFunc.getLine()  +" : ime " + func.getName() + " nije funkcija!", null);
			factorDesignatorFunc.struct = Tab.noType;
		}
	}
	
	// ***********************************************************************************************************
	
	
	
	
	// **** STATEMENT ********************************************************************************************
	
	public void visit(MatchedReturn matchedReturn) {
		returnFound = true;
		Struct currentMethodType = currentMethod.getType();
		report_info("currentMethodType " + currentMethodType, null);
		if (!currentMethodType.compatibleWith(matchedReturn.getExpr().struct)) {
			report_error("Greska na liniji " + matchedReturn.getLine() + " : " + "tip izraza u return naredbi ne slaze se sa tipom povratne vrednosti funkcije " + currentMethod.getName(), null);
		}
	}
	
	// ***********************************************************************************************************
	
	
	
	
	// **** DESIGNATOR *******************************************************************************************
	
	public void visit(DesignatorSimple designatorSimple) {
		Obj obj = SymbolTableTab.find(designatorSimple.getName());
		if (obj == SymbolTableTab.noObj) 
			report_error("Greska na liniji " + designatorSimple.getLine()+ " : ime "+ designatorSimple.getName()+" nije deklarisano! ", null);
		
		designatorSimple.obj = obj;
	}
	
	// ***********************************************************************************************************
	
	
	// **** NAMESPACE ********************************************************************************************
	/*
	public void visit(NamespaceName namespaceName) {
		SymbolTableTab.insert(SymbolTableObject.Namespace, namespaceName.getNamespaceName(), Tab.noType);
		SymbolTableTab.openScope();
	}
	
	public void visit(Namespace namespace) {
		SymbolTableTab.chainLocalSymbols(namespace.getNamespaceName().obj);
		SymbolTableTab.closeScope();
	}
	*/
	// ***********************************************************************************************************
    
    
    public boolean passed(){
    	return !errorDetected;
    }

}
