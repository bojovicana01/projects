package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

// --------------------------------------TERMINALS-------------------------------------------------

terminal PROG, RETURN, PRINT, READ, VOID, CONST, NEW;
terminal IF, ELSE;

terminal COMMA, SEMI, COLON;
terminal LBRACE, RBRACE, LPAREN, RPAREN, LSQUAREBRACKET, RSQUAREBRACKET;

terminal EQUAL, PLUS, MINUS, TIMES, SLASH, PERCENT;
terminal BITWISEAND, BITWISEOR;
terminal INCREMENT, DECREMENT;
terminal EQUALS, DIFFERS, GREATERTHAN, GREATERTHANOREQUAL, LESSTHAN, LESSTHANOREQUAL;

terminal String IDENT;
terminal Integer NUMBER;
terminal Boolean BOOLEAN;
terminal Character CHARACTER;

// --------------------------------------NONTERMINALS----------------------------------------------

nonterminal Program Program;
nonterminal Type Type;
nonterminal VarDeclList VarDeclList;
nonterminal VarDecl VarDecl;
nonterminal MethodDeclList MethodDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal FormPars FormPars;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList;
nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal Bitop Bitop;
nonterminal Unaryop Unaryop;
nonterminal ConstDecl ConstDecl;
nonterminal ConstDeclList ConstDeclList;
nonterminal Constant Constant;
nonterminal NumConst NumConst;
nonterminal BoolConst BoolConst;
nonterminal CharConst CharConst;
nonterminal Designator Designator;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal Expr Expr;
nonterminal Term Term;
nonterminal Factor Factor;
nonterminal Statement Statement;
nonterminal StatementList StatementList;
nonterminal Matched Matched;
nonterminal Unmatched Unmatched;

nonterminal AddopTermList AddopTermList;
nonterminal MulopFactorList MulopFactorList;

// --------------------------------------GRAMMAR---------------------------------------------------

Program ::= (Program) PROG IDENT:I1 VarDeclList:V2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Program(I1, V2, M3); RESULT.setLine(I1left); :};

VarDeclList ::= (VarDeclarations) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclarations(V1, V2); RESULT.setLine(V1left); :}
			|
			(NoVarDecl) {: RESULT=new NoVarDecl(); :} /* epsilon */
			;

VarDecl ::= (VarDecl) Type:varType IDENT:varName SEMI {: RESULT=new VarDecl(varType, varName); RESULT.setLine(varTypeleft); :};

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
				|
				(NoMethodDecl) {: RESULT=new NoMethodDecl(); :} /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) Type:retType IDENT:methName LPAREN FormPars:F1 RPAREN VarDeclList:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new MethodDecl(retType, methName, F1, V2, S3); RESULT.setLine(retTypeleft); :};


FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :}
		  |
		  (NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */
		  ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
				|
				(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
				;

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				;
				
Statement ::= (MatchedStmt) Matched:M1 {: RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); :}
		   |
		   (UnmatchedStmt) Unmatched:U1 {: RESULT=new UnmatchedStmt(U1); RESULT.setLine(U1left); :}
		   ; 

Unmatched ::= (UnmatchedIf) IF Expr:E1 Statement:S2 {: RESULT=new UnmatchedIf(E1, S2); RESULT.setLine(E1left); :}
		 	|
		 	(UnmatchedIfElse) IF Expr:E1 Matched:M2 ELSE Unmatched:U3 {: RESULT=new UnmatchedIfElse(E1, M2, U3); RESULT.setLine(E1left); :}
		 	;

Matched ::= DesignatorStatement:D1 SEMI {: RESULT=new MatchedDerived1(D1); RESULT.setLine(D1left); :}
		   |
		   (ErrorStmt) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorStmt(); :}
		   |
		   (ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
		   |
		   (PrintStmtBasic) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStmtBasic(E1); RESULT.setLine(E1left); :}
		   |
		   (PrintStmt) PRINT LPAREN Expr:E1 COMMA NumConst:N2 RPAREN SEMI {: RESULT=new PrintStmt(E1, N2); RESULT.setLine(E1left); :}
		   |
		   (ReturnExpr) RETURN Expr:t SEMI {: RESULT=new ReturnExpr(t); RESULT.setLine(tleft); :}
		   |
		   (ReturnNoExpr) RETURN SEMI {: RESULT=new ReturnNoExpr(); :}
		   |
		   (MatchedStatement) IF Expr:E1 Matched:M2 ELSE Matched:M3 {: RESULT=new MatchedStatement(E1, M2, M3); RESULT.setLine(E1left); :}
		   ;
		   
Expr ::= MINUS Term:T1 AddopTermList:A2 {: RESULT=new ExprDerived1(T1, A2); RESULT.setLine(T1left); :}
	 |
	 Term:T1 AddopTermList:A2 {: RESULT=new ExprDerived2(T1, A2); RESULT.setLine(T1left); :}
	 ;
	 
AddopTermList ::= AddopTermList:A1 Addop:A2 Term:T3 {: RESULT=new AddopTermListDerived1(A1, A2, T3); RESULT.setLine(A1left); :}
			  | {: RESULT=new AddopTermListDerived2(); :}
			  /* epsilon */
			  ;
			  
Term ::= Factor:F1 MulopFactorList:M2 {: RESULT=new TermDerived1(F1, M2); RESULT.setLine(F1left); :};

MulopFactorList ::= MulopFactorList:M1 Mulop:M2 Factor:F3 {: RESULT=new MulopFactorListDerived1(M1, M2, F3); RESULT.setLine(M1left); :}
				| {: RESULT=new MulopFactorListDerived2(); :}
				/* epsilon */
			  	;
			  	
Factor ::= NumConst:N1 {: RESULT=new FactorDerived1(N1); RESULT.setLine(N1left); :}
	   |
	   CharConst:C1 {: RESULT=new FactorDerived2(C1); RESULT.setLine(C1left); :}
	   |
	   BoolConst:B1 {: RESULT=new FactorDerived3(B1); RESULT.setLine(B1left); :}
	   |
	   (ExprInParen) LPAREN Expr:E1 RPAREN {: RESULT=new ExprInParen(E1); RESULT.setLine(E1left); :}
	   |
	   (Var) Designator:d {: RESULT=new Var(d); RESULT.setLine(dleft); :}
	   | 
	   (FuncCall) Designator:func LPAREN ActualPars:A1 RPAREN {: RESULT=new FuncCall(func, A1); RESULT.setLine(funcleft); :}
	   |
	   NEW Type:T1 LSQUAREBRACKET Expr:E2 RSQUAREBRACKET {: RESULT=new FactorDerived4(T1, E2); RESULT.setLine(T1left); :}
	   ;
		
ActualPars ::= (Actuals) ActualParamList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :}
			|
			(NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */
			;
		
ActualParamList ::= (ActualParams) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); :}
				|
				(ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :}
				;
				
Designator ::= (Designator) IDENT:name {: RESULT=new Designator(name); RESULT.setLine(nameleft); :};

// *PROJECT GRAMMAR*
DesignatorStatement ::= Designator:D1 EQUAL Expr:E2 {: RESULT=new DesignatorStatementDerived1(D1, E2); RESULT.setLine(D1left); :}
					|
					Designator:D1 INCREMENT {: RESULT=new DesignatorStatementDerived2(D1); RESULT.setLine(D1left); :}
					|
					Designator:D1 DECREMENT {: RESULT=new DesignatorStatementDerived3(D1); RESULT.setLine(D1left); :}
					;

// *OPERATIONS*
Assignop ::= (Assignop) EQUAL {: RESULT=new Assignop(); :};
Relop ::= (RelopEq) EQUALS {: RESULT=new RelopEq(); :} | (RelopDiff) DIFFERS {: RESULT=new RelopDiff(); :} 
	  | (RelopGrThan) GREATERTHAN {: RESULT=new RelopGrThan(); :} | (RelopGrThanEq) GREATERTHANOREQUAL {: RESULT=new RelopGrThanEq(); :} 
	  | (RelopLessThan) LESSTHAN {: RESULT=new RelopLessThan(); :} | (RelopLessThanEq) LESSTHANOREQUAL {: RESULT=new RelopLessThanEq(); :};
Addop ::= (Addop) PLUS {: RESULT=new Addop(); :} | (Subtracktop) MINUS {: RESULT=new Subtracktop(); :};
Mulop ::= (Mulop) TIMES {: RESULT=new Mulop(); :} | (Divop) SLASH {: RESULT=new Divop(); :} | (Modop) PERCENT {: RESULT=new Modop(); :};
Unaryop ::= (UnaryopInc) INCREMENT {: RESULT=new UnaryopInc(); :} | (UnaryopDec) DECREMENT {: RESULT=new UnaryopDec(); :};
Bitop ::= (BitopAnd) BITWISEAND {: RESULT=new BitopAnd(); :} | (BitopOr) BITWISEOR {: RESULT=new BitopOr(); :};


// *CONSTANTS*
Constant ::= NumConst:N1 {: RESULT=new ConstantDerived1(N1); RESULT.setLine(N1left); :} | BoolConst:B1 {: RESULT=new ConstantDerived2(B1); RESULT.setLine(B1left); :} | CharConst:C1 {: RESULT=new ConstantDerived3(C1); RESULT.setLine(C1left); :};
NumConst ::= (NumConst) NUMBER:N1 {: RESULT=new NumConst(N1); RESULT.setLine(N1left); :};
BoolConst ::= (BoolConst) BOOLEAN:B1 {: RESULT=new BoolConst(B1); RESULT.setLine(B1left); :};
CharConst ::= (CharConst) CHARACTER:C1 {: RESULT=new CharConst(C1); RESULT.setLine(C1left); :};


