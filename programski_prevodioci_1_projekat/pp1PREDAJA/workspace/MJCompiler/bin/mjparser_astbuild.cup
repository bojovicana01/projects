package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	Symbol detectedErrSymbol = null;
	
	Logger log = Logger.getLogger(getClass());
	Logger errLog = Logger.getLogger("error");
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol) {
    		detectedErrSymbol = (Symbol) info;
    		msg.append (" na liniji ").append(((Symbol)info).left);
    	}
            
        errLog.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

// --------------------------------------TERMINALS-------------------------------------------------

terminal PROG, RETURN, PRINT, READ, VOID, CONST, NEW, NAMESPACE;
terminal IF, ELSE;

terminal COMMA, SEMI, COLON;
terminal LBRACE, RBRACE, LPAREN, RPAREN, LSQUAREBRACKET, RSQUAREBRACKET;

terminal EQUAL, PLUS, MINUS, TIMES, SLASH, PERCENT;
terminal BITWISEAND, BITWISEOR;
terminal INCREMENT, DECREMENT;
terminal EQUALS, DIFFERS, GREATERTHAN, GREATERTHANOREQUAL, LESSTHAN, LESSTHANOREQUAL;

terminal String IDENT;
terminal Integer NUMBER;
terminal Boolean BOOLEAN;
terminal Character CHARACTER;

// --------------------------------------NONTERMINALS----------------------------------------------

nonterminal NamespaceList NamespaceList;
nonterminal DeclList DeclList;
nonterminal Decl Decl;
nonterminal VarDeclList VarDeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal FormPars FormPars;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList;
nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal Bitop Bitop;
nonterminal Unaryop Unaryop;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstDeclListSingleType ConstDeclListSingleType;
nonterminal BoolConst BoolConst;
nonterminal CharConst CharConst;
nonterminal Statement Statement;
nonterminal StatementList StatementList;
nonterminal Matched Matched;
nonterminal Unmatched Unmatched;

nonterminal ArrayTypeOptional ArrayTypeOptional;
nonterminal OptSquareBrackets OptSquareBrackets;
nonterminal FactorMatrixTypeOptional FactorMatrixTypeOptional;
nonterminal MatrixTypeOptional MatrixTypeOptional;
nonterminal OptSquareBracketsMatrix OptSquareBracketsMatrix;


nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramName, Program;
nonterminal rs.etf.pp1.symboltable.concepts.Obj NamespaceName, Namespace;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodTypeName, MethodDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj DesignatorName, Designator, DesignatorStatement, DesignatorStatementAssigment;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ConstantTypeName, CName, ConstDecl, Constant;
nonterminal rs.etf.pp1.symboltable.concepts.Obj VarTypeName, VarName, VarDecl, VarDeclListSingleType;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr, Term, AddopTermList, MulopFactorList, Factor;
nonterminal rs.etf.pp1.symboltable.concepts.Struct NumConst;

// --------------------------------------GRAMMAR---------------------------------------------------



// * PROGRAM *
Program ::= (Program) PROG ProgramName:P1 NamespaceList:N2 DeclList:D3 LBRACE MethodDeclList:M4 RBRACE {: RESULT=new Program(P1, N2, D3, M4); RESULT.setLine(P1left); :};

ProgramName ::= (ProgramName) IDENT:programName {: RESULT=new ProgramName(programName); RESULT.setLine(programNameleft); :};



// * TYPE *
Type ::= (TypeSimple) IDENT:typeNameSimple {: RESULT=new TypeSimple(typeNameSimple); RESULT.setLine(typeNameSimpleleft); :}
	 |
	 (TypeNamespaceResolution) IDENT:I1 COLON COLON IDENT:typeNameNSR {: RESULT=new TypeNamespaceResolution(I1, typeNameNSR); RESULT.setLine(I1left); :}
	 ;



// * NAMESPACE *
NamespaceList ::= (ENamespaceList) NamespaceList:N1 Namespace:N2 {: RESULT=new ENamespaceList(N1, N2); RESULT.setLine(N1left); :}
			  | 
			  (NoNamespaceList) {: RESULT=new NoNamespaceList(); :} /* epsilon */
			  ;
		  
Namespace ::= (Namespace) NAMESPACE NamespaceName:N1 LBRACE DeclList:D2 LBRACE MethodDeclList:M3 RBRACE RBRACE {: RESULT=new Namespace(N1, D2, M3); RESULT.setLine(N1left); :};

NamespaceName ::= (NamespaceName) IDENT:namespaceName {: RESULT=new NamespaceName(namespaceName); RESULT.setLine(namespaceNameleft); :};



// * DECLARATIONS *
DeclList ::= (EDeclList) DeclList:D1 Decl:D2 {: RESULT=new EDeclList(D1, D2); RESULT.setLine(D1left); :}
		 |
		 (NoDeclList) {: RESULT=new NoDeclList(); :} /* epsilon */
		 ;
		 
Decl ::= (DeclConst) ConstDecl:C1 {: RESULT=new DeclConst(C1); RESULT.setLine(C1left); :} | (DeclVar) VarDecl:V1 {: RESULT=new DeclVar(V1); RESULT.setLine(V1left); :};



// * CONSTANTS *
ConstDeclList ::= (EConstDeclList) ConstDeclList:C1 ConstDecl:C2 {: RESULT=new EConstDeclList(C1, C2); RESULT.setLine(C1left); :}
			  |
			  (NoConstDeclList) {: RESULT=new NoConstDeclList(); :} /* epsilon */
			  ;

ConstDecl ::= (EConstDecl) CONST ConstantTypeName:C1 EQUAL Constant:constantVal ConstDeclListSingleType:C2 SEMI {: RESULT=new EConstDecl(C1, constantVal, C2); RESULT.setLine(C1left); :}
			|
			(ErrorConstDeclToSemi) CONST error SEMI:l
		    {: parser.report_error("Konstrukcija iskaza dodele - Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorConstDeclToSemi(); :}
			;
			
ConstantTypeName ::= (ConstantTypeName) Type:constantType IDENT:constantName {: RESULT=new ConstantTypeName(constantType, constantName); RESULT.setLine(constantTypeleft); :};

ConstDeclListSingleType ::= (EConstDeclListSingleType) ConstDeclListSingleType:C1 COMMA CName:C2 EQUAL Constant:constantVal {: RESULT=new EConstDeclListSingleType(C1, C2, constantVal); RESULT.setLine(C1left); :}
						  |
						  (NoConstDeclListSingleType) {: RESULT=new NoConstDeclListSingleType(); :} /* epsilon */
						  ;
			
CName ::= (CName) IDENT:constantName {: RESULT=new CName(constantName); RESULT.setLine(constantNameleft); :};
			  
		
						  
// * VARS *
VarDeclList ::= (EVarDeclList) VarDeclList:V1 VarDecl:V2 {: RESULT=new EVarDeclList(V1, V2); RESULT.setLine(V1left); :}
			|
			(NoVarDeclList) {: RESULT=new NoVarDeclList(); :} /* epsilon */
			;
						  
VarDecl ::= (EVarDecl) VarTypeName:V1 VarDeclListSingleType:V2 SEMI {: RESULT=new EVarDecl(V1, V2); RESULT.setLine(V1left); :}
		 |
		 (ErrorVarDeclToSemi) error SEMI:l
		 {: parser.report_error("Definicija globalne promenljive - Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorVarDeclToSemi(); :}
		 ;
		 
VarTypeName ::= (EVarTypeName) Type:varType IDENT:varName OptSquareBrackets:O1 {: RESULT=new EVarTypeName(varType, varName, O1); RESULT.setLine(varTypeleft); :}
			|
			(ErrorVarTypeName) Type:T1 error
			{: parser.report_error("Definicija globalne promenljive - Izvrsen oporavak od greske u liniji ", parser.detectedErrSymbol);  :} {: RESULT=new ErrorVarTypeName(T1); RESULT.setLine(T1left); :}
			;

OptSquareBrackets ::= (EOptSquareBrackets) LSQUAREBRACKET RSQUAREBRACKET OptSquareBracketsMatrix:O1 {: RESULT=new EOptSquareBrackets(O1); RESULT.setLine(O1left); :}
				  |
				  (NoOptSquareBrackets) {: RESULT=new NoOptSquareBrackets(); :} /* epsilon */
				  ; 
				  
OptSquareBracketsMatrix ::= (EOptSquareBracketsMatrix) LSQUAREBRACKET RSQUAREBRACKET {: RESULT=new EOptSquareBracketsMatrix(); :}
						|
						(NoOptSquareBracketsMatrix) {: RESULT=new NoOptSquareBracketsMatrix(); :} /* epsilon */
						;

VarDeclListSingleType ::= (EVarDeclListSingleType) VarDeclListSingleType:V1 COMMA VarName:V2 {: RESULT=new EVarDeclListSingleType(V1, V2); RESULT.setLine(V1left); :}
						|
						(ErrorVarDeclListSingleTypeToComma) error COMMA:l
						{: parser.report_error("Definicija globalne promenljive - Izvrsen oporavak do , u liniji " + lleft, null);  :} {: RESULT=new ErrorVarDeclListSingleTypeToComma(); :}
						|
						(NoVarDeclListSingleType) {: RESULT=new NoVarDeclListSingleType(); :} /* epsilon */
						;

VarName ::= (EVarName) IDENT:varName OptSquareBrackets:O1 {: RESULT=new EVarName(varName, O1); RESULT.setLine(varNameleft); :}
		|
		(ErrorVarName) error
		{: parser.report_error("Definicija globalne promenljive - Izvrsen oporavak od greske u liniji ", parser.detectedErrSymbol);  :} {: RESULT=new ErrorVarName(); :}
		;


// * METHODS *
MethodDeclList ::= (EMethodDeclList) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new EMethodDeclList(M1, M2); RESULT.setLine(M1left); :}
				|
				(NoMethodDeclList) {: RESULT=new NoMethodDeclList(); :} /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) MethodTypeName:M1 LPAREN FormPars:F2 RPAREN VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDecl(M1, F2, V3, S4); RESULT.setLine(M1left); :};

MethodTypeName ::= (EMethodTypeName) Type:retType IDENT:methName {: RESULT=new EMethodTypeName(retType, methName); RESULT.setLine(retTypeleft); :} | (VoidMethodTypeName) VOID IDENT:vmethName {: RESULT=new VoidMethodTypeName(vmethName); RESULT.setLine(vmethNameleft); :};



// * PARAMETERS *
FormPars ::= (EFormPars) FormalParamList:F1 {: RESULT=new EFormPars(F1); RESULT.setLine(F1left); :}
		  |
		  (NoFormPars) {: RESULT=new NoFormPars(); :} /* epsilon */
		  ;
		  
FormalParamList ::= (MultipleFormalParamList) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new MultipleFormalParamList(F1, F2); RESULT.setLine(F1left); :}
				|
				(SingleFormalParamList) FormalParamDecl:F1 {: RESULT=new SingleFormalParamList(F1); RESULT.setLine(F1left); :}
				;

FormalParamDecl ::= (FormalParamDeclSimple) Type:T1 IDENT:I2 {: RESULT=new FormalParamDeclSimple(T1, I2); RESULT.setLine(T1left); :}
				|
				(FormalParamDeclArr) Type:T1 IDENT:I2 LSQUAREBRACKET RSQUAREBRACKET {: RESULT=new FormalParamDeclArr(T1, I2); RESULT.setLine(T1left); :}
				;
				
ActualPars ::= (EActualPars) ActualParamList:A1 {: RESULT=new EActualPars(A1); RESULT.setLine(A1left); :}
			|
			(NoActualPars) {: RESULT=new NoActualPars(); :} /* epsilon */
			;
		
ActualParamList ::= (MultipleActualParamList) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new MultipleActualParamList(A1, E2); RESULT.setLine(A1left); :}
				|
				(SingleActualParamList) Expr:E1 {: RESULT=new SingleActualParamList(E1); RESULT.setLine(E1left); :}
				;



// * STATEMENT *
StatementList ::= (EStatementList) StatementList:S1 Statement:S2 {: RESULT=new EStatementList(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStatementList) {: RESULT=new NoStatementList(); :} /* epsilon */
				;
				
Statement ::= (StatementMatched) Matched:M1 {: RESULT=new StatementMatched(M1); RESULT.setLine(M1left); :}
		   |
		   (StatementUnmatched) Unmatched:U1 {: RESULT=new StatementUnmatched(U1); RESULT.setLine(U1left); :}
		   ; 

Unmatched ::= (UnmatchedIF) IF Expr:E1 Statement:S2 {: RESULT=new UnmatchedIF(E1, S2); RESULT.setLine(E1left); :}
		 	|
		 	(UnmatchedIFELSE) IF Expr:E1 Matched:M2 ELSE Unmatched:U3 {: RESULT=new UnmatchedIFELSE(E1, M2, U3); RESULT.setLine(E1left); :}
		 	;

Matched ::= (MatchedDesignatorStatement) DesignatorStatement:D1 {: RESULT=new MatchedDesignatorStatement(D1); RESULT.setLine(D1left); :}
		   |
		   (MatchedRead) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new MatchedRead(D1); RESULT.setLine(D1left); :}
		   |
		   (MatchedPrintSimple) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new MatchedPrintSimple(E1); RESULT.setLine(E1left); :}
		   |
		   (MathchedPrint) PRINT LPAREN Expr:E1 COMMA NumConst:N2 RPAREN SEMI {: RESULT=new MathchedPrint(E1, N2); RESULT.setLine(E1left); :}
		   |
		   (MatchedReturn) RETURN Expr:t SEMI {: RESULT=new MatchedReturn(t); RESULT.setLine(tleft); :}
		   |
		   (MatchedReturnNone) RETURN SEMI {: RESULT=new MatchedReturnNone(); :}
		   |
		   (MatchedIFELSE) IF Expr:E1 Matched:M2 ELSE Matched:M3 {: RESULT=new MatchedIFELSE(E1, M2, M3); RESULT.setLine(E1left); :}
		   |
		   (ProcCall) Designator:func LPAREN ActualPars:A1 RPAREN SEMI {: RESULT=new ProcCall(func, A1); RESULT.setLine(funcleft); :}
		   ;
		  
	
		  
// * EXPR *
Expr ::= (NegativeStartExpr) MINUS Term:T1 {: RESULT=new NegativeStartExpr(T1); RESULT.setLine(T1left); :} 
	 |
	 (PositiveStartTermOnlyExpr) Term:T1 {: RESULT=new PositiveStartTermOnlyExpr(T1); RESULT.setLine(T1left); :}
	 |
	 (PositiveStartExpr) Expr:E1 Addop:A2 Term:T3 {: RESULT=new PositiveStartExpr(E1, A2, T3); RESULT.setLine(E1left); :}
	 ;
			  
Term ::= (Term) Factor:F1 MulopFactorList:M2 {: RESULT=new Term(F1, M2); RESULT.setLine(F1left); :};

MulopFactorList ::= (MultipleMulopFactorList) MulopFactorList:M1 Mulop:M2 Factor:F3 {: RESULT=new MultipleMulopFactorList(M1, M2, F3); RESULT.setLine(M1left); :}
				|
				(NoMulopFactorList) {: RESULT=new NoMulopFactorList(); :} /* epsilon */
			  	;
			  	
Factor ::= (FactorNumConst) NumConst:N1 {: RESULT=new FactorNumConst(N1); RESULT.setLine(N1left); :}
	   |
	   (FactorCharConst) CharConst:C1 {: RESULT=new FactorCharConst(C1); RESULT.setLine(C1left); :}
	   |
	   (FactorBoolConst) BoolConst:B1 {: RESULT=new FactorBoolConst(B1); RESULT.setLine(B1left); :}
	   |
	   (FactorExprInParens) LPAREN Expr:E1 RPAREN {: RESULT=new FactorExprInParens(E1); RESULT.setLine(E1left); :}
	   |
	   (FactorDesignatorVar) Designator:designatorVar {: RESULT=new FactorDesignatorVar(designatorVar); RESULT.setLine(designatorVarleft); :}
	   | 
	   (FactorDesignatorFunc) Designator:func LPAREN ActualPars:A1 RPAREN {: RESULT=new FactorDesignatorFunc(func, A1); RESULT.setLine(funcleft); :}
	   |
	   (FactorNew) NEW Type:T1 LSQUAREBRACKET Expr:E2 RSQUAREBRACKET FactorMatrixTypeOptional:F3 {: RESULT=new FactorNew(T1, E2, F3); RESULT.setLine(T1left); :}
	   ;
		
FactorMatrixTypeOptional ::= (EFactorMatrixTypeOptional) LSQUAREBRACKET Expr:E1 RSQUAREBRACKET {: RESULT=new EFactorMatrixTypeOptional(E1); RESULT.setLine(E1left); :}
						 |
						 (NoFactorMatrixTypeOptional) {: RESULT=new NoFactorMatrixTypeOptional(); :} /* epsilon */
						 ;


// * DESIGNATOR	*
Designator ::= (DesignatorSimple) DesignatorName:D1 ArrayTypeOptional:A2 {: RESULT=new DesignatorSimple(D1, A2); RESULT.setLine(D1left); :}
		   |
		   (DesignatorNSR) IDENT:namespaceName COLON COLON DesignatorName:D1 ArrayTypeOptional:A2 {: RESULT=new DesignatorNSR(namespaceName, D1, A2); RESULT.setLine(namespaceNameleft); :}
		   ;
		   
DesignatorName ::= (DesignatorName) IDENT:name {: RESULT=new DesignatorName(name); RESULT.setLine(nameleft); :};

ArrayTypeOptional ::= (EArrayTypeOptional) LSQUAREBRACKET Expr:E1 RSQUAREBRACKET MatrixTypeOptional:M2 {: RESULT=new EArrayTypeOptional(E1, M2); RESULT.setLine(E1left); :}
				  |
				  (NoArrayTypeOptional) {: RESULT=new NoArrayTypeOptional(); :} /* epsilon */
				  ;
				  
MatrixTypeOptional ::= (EMatrixTypeOptional) LSQUAREBRACKET Expr:E1 RSQUAREBRACKET {: RESULT=new EMatrixTypeOptional(E1); RESULT.setLine(E1left); :}
				   |
				   (NoMatrixTypeOptional) {: RESULT=new NoMatrixTypeOptional(); :} /* epsilon */
				   ;

// PROJECT GRAMMAR
DesignatorStatement ::= (DesignatorStatementEQUAL) DesignatorStatementAssigment:D1 {: RESULT=new DesignatorStatementEQUAL(D1); RESULT.setLine(D1left); :}
					|
					(DesignatorStatementINCREMENT) Designator:D1 INCREMENT SEMI {: RESULT=new DesignatorStatementINCREMENT(D1); RESULT.setLine(D1left); :}
					|
					(DesignatorStatementDECREMENT) Designator:D1 DECREMENT SEMI {: RESULT=new DesignatorStatementDECREMENT(D1); RESULT.setLine(D1left); :}
					;
					
DesignatorStatementAssigment ::= (EDesignatorStatementAssigment) Designator:D1 EQUAL Expr:E2 SEMI {: RESULT=new EDesignatorStatementAssigment(D1, E2); RESULT.setLine(D1left); :}
							 |
							 (ErrorDesignatorStatementAssigmentToSemi) error SEMI:l
		                     {: parser.report_error("Konstrukcija iskaza dodele - Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorDesignatorStatementAssigmentToSemi(); :}
							 ;



// *OPERATIONS*
Assignop ::= (Equal) EQUAL {: RESULT=new Equal(); :};
Relop ::= (Equals) EQUALS {: RESULT=new Equals(); :} | (Differs) DIFFERS {: RESULT=new Differs(); :} 
	  | (GreaterThan) GREATERTHAN {: RESULT=new GreaterThan(); :} | (GreaterThanOrEqual) GREATERTHANOREQUAL {: RESULT=new GreaterThanOrEqual(); :} 
	  | (LessThan) LESSTHAN {: RESULT=new LessThan(); :} | (LessThanOrEqual) LESSTHANOREQUAL {: RESULT=new LessThanOrEqual(); :};
Addop ::= (Plus) PLUS {: RESULT=new Plus(); :} | (Minus) MINUS {: RESULT=new Minus(); :};
Mulop ::= (Times) TIMES {: RESULT=new Times(); :} | (Slash) SLASH {: RESULT=new Slash(); :} | (Percent) PERCENT {: RESULT=new Percent(); :};
Unaryop ::= (Increment) INCREMENT {: RESULT=new Increment(); :} | (Decrement) DECREMENT {: RESULT=new Decrement(); :};
Bitop ::= (BitwiseAnd) BITWISEAND {: RESULT=new BitwiseAnd(); :} | (BitwiseOr) BITWISEOR {: RESULT=new BitwiseOr(); :};



// *CONSTANTS TYPES*
Constant ::= (CNumConst) NUMBER:value {: RESULT=new CNumConst(value); RESULT.setLine(valueleft); :} | (CBoolConst) BOOLEAN:value {: RESULT=new CBoolConst(value); RESULT.setLine(valueleft); :} | (CCharConst) CHARACTER:value {: RESULT=new CCharConst(value); RESULT.setLine(valueleft); :};
NumConst ::= (NumConst) NUMBER:value {: RESULT=new NumConst(value); RESULT.setLine(valueleft); :};
BoolConst ::= (BoolConst) BOOLEAN:value {: RESULT=new BoolConst(value); RESULT.setLine(valueleft); :};
CharConst ::= (CharConst) CHARACTER:value {: RESULT=new CharConst(value); RESULT.setLine(valueleft); :};


