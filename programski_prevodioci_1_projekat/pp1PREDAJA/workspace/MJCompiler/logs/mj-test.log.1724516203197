INFO  18:15:33,286 - Compiling source file: C:\pp1_domaci_avg\workspace\MJCompiler\test\program.mj
INFO  18:15:33,318 - #2 program
INFO  18:15:33,318 - #37 MJProgram
INFO  18:15:33,318 - #7 const
INFO  18:15:33,319 - #37 bool
INFO  18:15:33,319 - #37 w
INFO  18:15:33,319 - #21 =
INFO  18:15:33,320 - #39 true
INFO  18:15:33,320 - #13 ;
INFO  18:15:33,320 - #7 const
INFO  18:15:33,321 - #37 char
INFO  18:15:33,321 - #37 z
INFO  18:15:33,321 - #21 =
INFO  18:15:33,321 - #40 z
INFO  18:15:33,321 - #13 ;
INFO  18:15:33,321 - #7 const
INFO  18:15:33,321 - #37 int
INFO  18:15:33,321 - #37 n
INFO  18:15:33,321 - #21 =
INFO  18:15:33,321 - #38 4
INFO  18:15:33,321 - #13 ;
INFO  18:15:33,321 - #7 const
INFO  18:15:33,322 - #37 int
INFO  18:15:33,322 - #37 q
INFO  18:15:33,322 - #21 =
INFO  18:15:33,323 - #38 4
INFO  18:15:33,323 - #12 ,
INFO  18:15:33,323 - #37 l
INFO  18:15:33,323 - #21 =
INFO  18:15:33,323 - #38 3
INFO  18:15:33,323 - #12 ,
INFO  18:15:33,323 - #37 m
INFO  18:15:33,323 - #21 =
INFO  18:15:33,323 - #38 7
INFO  18:15:33,323 - #13 ;
INFO  18:15:33,324 - #37 int
INFO  18:15:33,324 - #37 x
INFO  18:15:33,324 - #13 ;
INFO  18:15:33,326 - #37 int
INFO  18:15:33,326 - #37 y
INFO  18:15:33,326 - #13 ;
INFO  18:15:33,326 - #15 {
INFO  18:15:33,326 - #37 int
INFO  18:15:33,327 - #37 main
INFO  18:15:33,327 - #17 (
INFO  18:15:33,327 - #18 )
INFO  18:15:33,327 - #37 bool
INFO  18:15:33,328 - #37 t
INFO  18:15:33,328 - #13 ;
INFO  18:15:33,328 - #37 int
INFO  18:15:33,328 - #37 niz
INFO  18:15:33,328 - #19 [
INFO  18:15:33,328 - #20 ]
INFO  18:15:33,328 - #13 ;
INFO  18:15:33,329 - #15 {
INFO  18:15:33,329 - #37 niz
INFO  18:15:33,329 - #21 =
INFO  18:15:33,330 - #8 new
INFO  18:15:33,330 - #37 int
INFO  18:15:33,330 - #19 [
INFO  18:15:33,330 - #38 3
INFO  18:15:33,330 - #20 ]
INFO  18:15:33,332 - #13 ;
INFO  18:15:33,332 - #37 t
INFO  18:15:33,332 - #21 =
INFO  18:15:33,332 - #39 true
INFO  18:15:33,333 - #13 ;
INFO  18:15:33,333 - #37 x
INFO  18:15:33,333 - #21 =
INFO  18:15:33,333 - #38 3
INFO  18:15:33,333 - #13 ;
INFO  18:15:33,333 - #37 x
INFO  18:15:33,334 - #30 --
INFO  18:15:33,334 - #13 ;
INFO  18:15:33,334 - #4 print
INFO  18:15:33,334 - #17 (
INFO  18:15:33,334 - #40 a
INFO  18:15:33,334 - #18 )
INFO  18:15:33,334 - #13 ;
INFO  18:15:33,334 - #4 print
INFO  18:15:33,334 - #17 (
INFO  18:15:33,335 - #38 1
INFO  18:15:33,335 - #24 *
INFO  18:15:33,335 - #37 q
INFO  18:15:33,336 - #18 )
INFO  18:15:33,336 - #13 ;
INFO  18:15:33,336 - #37 y
INFO  18:15:33,336 - #21 =
INFO  18:15:33,336 - #23 -
INFO  18:15:33,336 - #38 4
INFO  18:15:33,337 - #22 +
INFO  18:15:33,337 - #38 9
INFO  18:15:33,337 - #24 *
INFO  18:15:33,338 - #38 5
INFO  18:15:33,338 - #13 ;
INFO  18:15:33,338 - #4 print
INFO  18:15:33,338 - #17 (
INFO  18:15:33,338 - #37 x
INFO  18:15:33,338 - #18 )
INFO  18:15:33,338 - #13 ;
INFO  18:15:33,338 - #4 print
INFO  18:15:33,338 - #17 (
INFO  18:15:33,338 - #37 y
INFO  18:15:33,338 - #18 )
INFO  18:15:33,338 - #13 ;
INFO  18:15:33,338 - #3 return
INFO  18:15:33,338 - #38 1
INFO  18:15:33,338 - #13 ;
INFO  18:15:33,338 - #16 }
INFO  18:15:33,338 - #16 }
INFO  18:15:33,344 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  NoNamespaceList(
  ) [NoNamespaceList]
  EDeclList(
    EDeclList(
      EDeclList(
        EDeclList(
          EDeclList(
            EDeclList(
              NoDeclList(
              ) [NoDeclList]
              DeclConst(
                EConstDecl(
                  ConstantTypeName(
                    TypeSimple(
                     bool
                    ) [TypeSimple]
                   w
                  ) [ConstantTypeName]
                  CBoolConst(
                   true
                  ) [CBoolConst]
                  NoConstDeclListSingleType(
                  ) [NoConstDeclListSingleType]
                ) [EConstDecl]
              ) [DeclConst]
            ) [EDeclList]
            DeclConst(
              EConstDecl(
                ConstantTypeName(
                  TypeSimple(
                   char
                  ) [TypeSimple]
                 z
                ) [ConstantTypeName]
                CCharConst(
                 z
                ) [CCharConst]
                NoConstDeclListSingleType(
                ) [NoConstDeclListSingleType]
              ) [EConstDecl]
            ) [DeclConst]
          ) [EDeclList]
          DeclConst(
            EConstDecl(
              ConstantTypeName(
                TypeSimple(
                 int
                ) [TypeSimple]
               n
              ) [ConstantTypeName]
              CNumConst(
               4
              ) [CNumConst]
              NoConstDeclListSingleType(
              ) [NoConstDeclListSingleType]
            ) [EConstDecl]
          ) [DeclConst]
        ) [EDeclList]
        DeclConst(
          EConstDecl(
            ConstantTypeName(
              TypeSimple(
               int
              ) [TypeSimple]
             q
            ) [ConstantTypeName]
            CNumConst(
             4
            ) [CNumConst]
            EConstDeclListSingleType(
              EConstDeclListSingleType(
                NoConstDeclListSingleType(
                ) [NoConstDeclListSingleType]
                CName(
                 l
                ) [CName]
                CNumConst(
                 3
                ) [CNumConst]
              ) [EConstDeclListSingleType]
              CName(
               m
              ) [CName]
              CNumConst(
               7
              ) [CNumConst]
            ) [EConstDeclListSingleType]
          ) [EConstDecl]
        ) [DeclConst]
      ) [EDeclList]
      DeclVar(
        EVarDecl(
          VarTypeName(
            TypeSimple(
             int
            ) [TypeSimple]
           x
            NoOptSquareBrackets(
            ) [NoOptSquareBrackets]
          ) [VarTypeName]
          NoVarDeclListSingleType(
          ) [NoVarDeclListSingleType]
        ) [EVarDecl]
      ) [DeclVar]
    ) [EDeclList]
    DeclVar(
      EVarDecl(
        VarTypeName(
          TypeSimple(
           int
          ) [TypeSimple]
         y
          NoOptSquareBrackets(
          ) [NoOptSquareBrackets]
        ) [VarTypeName]
        NoVarDeclListSingleType(
        ) [NoVarDeclListSingleType]
      ) [EVarDecl]
    ) [DeclVar]
  ) [EDeclList]
  EMethodDeclList(
    NoMethodDeclList(
    ) [NoMethodDeclList]
    MethodDecl(
      EMethodTypeName(
        TypeSimple(
         int
        ) [TypeSimple]
       main
      ) [EMethodTypeName]
      NoFormPars(
      ) [NoFormPars]
      EVarDeclList(
        EVarDeclList(
          NoVarDeclList(
          ) [NoVarDeclList]
          EVarDecl(
            VarTypeName(
              TypeSimple(
               bool
              ) [TypeSimple]
             t
              NoOptSquareBrackets(
              ) [NoOptSquareBrackets]
            ) [VarTypeName]
            NoVarDeclListSingleType(
            ) [NoVarDeclListSingleType]
          ) [EVarDecl]
        ) [EVarDeclList]
        EVarDecl(
          VarTypeName(
            TypeSimple(
             int
            ) [TypeSimple]
           niz
            EOptSquareBrackets(
            ) [EOptSquareBrackets]
          ) [VarTypeName]
          NoVarDeclListSingleType(
          ) [NoVarDeclListSingleType]
        ) [EVarDecl]
      ) [EVarDeclList]
      EStatementList(
        EStatementList(
          EStatementList(
            EStatementList(
              EStatementList(
                EStatementList(
                  EStatementList(
                    EStatementList(
                      EStatementList(
                        EStatementList(
                          NoStatementList(
                          ) [NoStatementList]
                          StatementMatched(
                            MatchedDesignatorStatement(
                              DesignatorStatementEQUAL(
                                EDesignatorStatementAssigment(
                                  DesignatorSimple(
                                   niz
                                    NoArrayTypeOptional(
                                    ) [NoArrayTypeOptional]
                                  ) [DesignatorSimple]
                                  PositiveStartTermOnlyExpr(
                                    Term(
                                      FactorNew(
                                        TypeSimple(
                                         int
                                        ) [TypeSimple]
                                        PositiveStartTermOnlyExpr(
                                          Term(
                                            FactorNumConst(
                                              NumConst(
                                               3
                                              ) [NumConst]
                                            ) [FactorNumConst]
                                            NoMulopFactorList(
                                            ) [NoMulopFactorList]
                                          ) [Term]
                                        ) [PositiveStartTermOnlyExpr]
                                      ) [FactorNew]
                                      NoMulopFactorList(
                                      ) [NoMulopFactorList]
                                    ) [Term]
                                  ) [PositiveStartTermOnlyExpr]
                                ) [EDesignatorStatementAssigment]
                              ) [DesignatorStatementEQUAL]
                            ) [MatchedDesignatorStatement]
                          ) [StatementMatched]
                        ) [EStatementList]
                        StatementMatched(
                          MatchedDesignatorStatement(
                            DesignatorStatementEQUAL(
                              EDesignatorStatementAssigment(
                                DesignatorSimple(
                                 t
                                  NoArrayTypeOptional(
                                  ) [NoArrayTypeOptional]
                                ) [DesignatorSimple]
                                PositiveStartTermOnlyExpr(
                                  Term(
                                    FactorBoolConst(
                                      BoolConst(
                                       true
                                      ) [BoolConst]
                                    ) [FactorBoolConst]
                                    NoMulopFactorList(
                                    ) [NoMulopFactorList]
                                  ) [Term]
                                ) [PositiveStartTermOnlyExpr]
                              ) [EDesignatorStatementAssigment]
                            ) [DesignatorStatementEQUAL]
                          ) [MatchedDesignatorStatement]
                        ) [StatementMatched]
                      ) [EStatementList]
                      StatementMatched(
                        MatchedDesignatorStatement(
                          DesignatorStatementEQUAL(
                            EDesignatorStatementAssigment(
                              DesignatorSimple(
                               x
                                NoArrayTypeOptional(
                                ) [NoArrayTypeOptional]
                              ) [DesignatorSimple]
                              PositiveStartTermOnlyExpr(
                                Term(
                                  FactorNumConst(
                                    NumConst(
                                     3
                                    ) [NumConst]
                                  ) [FactorNumConst]
                                  NoMulopFactorList(
                                  ) [NoMulopFactorList]
                                ) [Term]
                              ) [PositiveStartTermOnlyExpr]
                            ) [EDesignatorStatementAssigment]
                          ) [DesignatorStatementEQUAL]
                        ) [MatchedDesignatorStatement]
                      ) [StatementMatched]
                    ) [EStatementList]
                    StatementMatched(
                      MatchedDesignatorStatement(
                        DesignatorStatementDECREMENT(
                          DesignatorSimple(
                           x
                            NoArrayTypeOptional(
                            ) [NoArrayTypeOptional]
                          ) [DesignatorSimple]
                        ) [DesignatorStatementDECREMENT]
                      ) [MatchedDesignatorStatement]
                    ) [StatementMatched]
                  ) [EStatementList]
                  StatementMatched(
                    MatchedPrintSimple(
                      PositiveStartTermOnlyExpr(
                        Term(
                          FactorCharConst(
                            CharConst(
                             a
                            ) [CharConst]
                          ) [FactorCharConst]
                          NoMulopFactorList(
                          ) [NoMulopFactorList]
                        ) [Term]
                      ) [PositiveStartTermOnlyExpr]
                    ) [MatchedPrintSimple]
                  ) [StatementMatched]
                ) [EStatementList]
                StatementMatched(
                  MatchedPrintSimple(
                    PositiveStartTermOnlyExpr(
                      Term(
                        FactorNumConst(
                          NumConst(
                           1
                          ) [NumConst]
                        ) [FactorNumConst]
                        MultipleMulopFactorList(
                          NoMulopFactorList(
                          ) [NoMulopFactorList]
                          Times(
                          ) [Times]
                          FactorDesignatorVar(
                            DesignatorSimple(
                             q
                              NoArrayTypeOptional(
                              ) [NoArrayTypeOptional]
                            ) [DesignatorSimple]
                          ) [FactorDesignatorVar]
                        ) [MultipleMulopFactorList]
                      ) [Term]
                    ) [PositiveStartTermOnlyExpr]
                  ) [MatchedPrintSimple]
                ) [StatementMatched]
              ) [EStatementList]
              StatementMatched(
                MatchedDesignatorStatement(
                  DesignatorStatementEQUAL(
                    EDesignatorStatementAssigment(
                      DesignatorSimple(
                       y
                        NoArrayTypeOptional(
                        ) [NoArrayTypeOptional]
                      ) [DesignatorSimple]
                      PositiveStartExpr(
                        NegativeStartExpr(
                          Term(
                            FactorNumConst(
                              NumConst(
                               4
                              ) [NumConst]
                            ) [FactorNumConst]
                            NoMulopFactorList(
                            ) [NoMulopFactorList]
                          ) [Term]
                        ) [NegativeStartExpr]
                        Plus(
                        ) [Plus]
                        Term(
                          FactorNumConst(
                            NumConst(
                             9
                            ) [NumConst]
                          ) [FactorNumConst]
                          MultipleMulopFactorList(
                            NoMulopFactorList(
                            ) [NoMulopFactorList]
                            Times(
                            ) [Times]
                            FactorNumConst(
                              NumConst(
                               5
                              ) [NumConst]
                            ) [FactorNumConst]
                          ) [MultipleMulopFactorList]
                        ) [Term]
                      ) [PositiveStartExpr]
                    ) [EDesignatorStatementAssigment]
                  ) [DesignatorStatementEQUAL]
                ) [MatchedDesignatorStatement]
              ) [StatementMatched]
            ) [EStatementList]
            StatementMatched(
              MatchedPrintSimple(
                PositiveStartTermOnlyExpr(
                  Term(
                    FactorDesignatorVar(
                      DesignatorSimple(
                       x
                        NoArrayTypeOptional(
                        ) [NoArrayTypeOptional]
                      ) [DesignatorSimple]
                    ) [FactorDesignatorVar]
                    NoMulopFactorList(
                    ) [NoMulopFactorList]
                  ) [Term]
                ) [PositiveStartTermOnlyExpr]
              ) [MatchedPrintSimple]
            ) [StatementMatched]
          ) [EStatementList]
          StatementMatched(
            MatchedPrintSimple(
              PositiveStartTermOnlyExpr(
                Term(
                  FactorDesignatorVar(
                    DesignatorSimple(
                     y
                      NoArrayTypeOptional(
                      ) [NoArrayTypeOptional]
                    ) [DesignatorSimple]
                  ) [FactorDesignatorVar]
                  NoMulopFactorList(
                  ) [NoMulopFactorList]
                ) [Term]
              ) [PositiveStartTermOnlyExpr]
            ) [MatchedPrintSimple]
          ) [StatementMatched]
        ) [EStatementList]
        StatementMatched(
          MatchedReturn(
            PositiveStartTermOnlyExpr(
              Term(
                FactorNumConst(
                  NumConst(
                   1
                  ) [NumConst]
                ) [FactorNumConst]
                NoMulopFactorList(
                ) [NoMulopFactorList]
              ) [Term]
            ) [PositiveStartTermOnlyExpr]
          ) [MatchedReturn]
        ) [StatementMatched]
      ) [EStatementList]
    ) [MethodDecl]
  ) [EMethodDeclList]
) [Program]
INFO  18:15:33,344 - ===================================
INFO  18:15:33,346 -  PrintSimple = 4
INFO  18:15:33,346 -  VarDecl = 4
INFO  18:15:33,346 - Program = 1
INFO  18:15:33,346 - NegativeStartExpr = 1
INFO  18:15:33,346 - PositiveStartExpr = 1
INFO  18:15:33,346 - DesignatorStatementEQUAL = 4
INFO  18:15:33,347 - DesignatorStatementINCREMENT = 0
INFO  18:15:33,347 - DesignatorStatementDECREMENT = 1
INFO  18:15:33,347 - NumConst = 7
INFO  18:15:33,347 - BoolConst = 1
INFO  18:15:33,347 - CharConst = 1
INFO  18:15:33,347 - Namespace = 0
INFO  18:15:33,347 - ===================================
INFO  18:15:33,348 - Deklarisana promenljiva x na liniji 6
INFO  18:15:33,348 - Deklarisana promenljiva y na liniji 6
INFO  18:15:33,348 - Obradjuje se funkcija main na liniji 9
INFO  18:15:33,348 - Deklarisana promenljiva t na liniji 9
INFO  18:15:33,348 - Deklarisana promenljiva niz na liniji 9
ERROR 18:15:33,348 - Greska pri dodeli, na liniji: 11, Designator mora biti kompatibilnog tipa sa Expr! na liniji 11
INFO  18:15:33,348 - eDesignatorStatementAssigment.getDesignator().obj.getType(): 3 na liniji 11
INFO  18:15:33,348 - eDesignatorStatementAssigment.getExpr().struct: 3 na liniji 11
ERROR 18:15:33,348 - Greska pri dodeli, na liniji: 13, Designator mora biti kompatibilnog tipa sa Expr! na liniji 13
INFO  18:15:33,348 - eDesignatorStatementAssigment.getDesignator().obj.getType(): 5 na liniji 13
INFO  18:15:33,348 - eDesignatorStatementAssigment.getExpr().struct: 5 na liniji 13
ERROR 18:15:33,348 - Greska pri dodeli, na liniji: 15, Designator mora biti kompatibilnog tipa sa Expr! na liniji 15
INFO  18:15:33,348 - eDesignatorStatementAssigment.getDesignator().obj.getType(): 1 na liniji 15
INFO  18:15:33,348 - eDesignatorStatementAssigment.getExpr().struct: 1 na liniji 15
ERROR 18:15:33,349 - Greska pri dodeli, na liniji: 21, Designator mora biti kompatibilnog tipa sa Expr! na liniji 21
INFO  18:15:33,349 - eDesignatorStatementAssigment.getDesignator().obj.getType(): 1 na liniji 21
INFO  18:15:33,349 - eDesignatorStatementAssigment.getExpr().struct: 1 na liniji 21
INFO  18:15:33,349 - Linija: 27 : tip izraza u return naredbi se SLAZE sa tipom povratne vrednosti funkcije main
INFO  18:15:33,349 - ===================================
ERROR 18:15:33,349 - Parsiranje NIJE uspesno zavrseno
